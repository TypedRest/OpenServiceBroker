{
  "api/OpenServiceBroker.ApiVersion.html": {
    "href": "api/OpenServiceBroker.ApiVersion.html",
    "title": "Struct ApiVersion | OpenServiceBroker for .NET",
    "summary": "Struct ApiVersion Namespace OpenServiceBroker Assembly OpenServiceBroker.Model.dll public struct ApiVersion : IEquatable<ApiVersion> Implements IEquatable<ApiVersion> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ApiVersion(int, int) public ApiVersion(int major, int minor) Parameters major int minor int Fields HttpHeaderName public const string HttpHeaderName = \"X-Broker-API-Version\" Field Value string Properties Major public readonly int Major { get; } Property Value int Minor public readonly int Minor { get; } Property Value int Methods Equals(ApiVersion) Indicates whether the current object is equal to another object of the same type. public bool Equals(ApiVersion other) Parameters other ApiVersion An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Parse(string) public static ApiVersion Parse(string input) Parameters input string Returns ApiVersion ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator ==(ApiVersion, ApiVersion) public static bool operator ==(ApiVersion left, ApiVersion right) Parameters left ApiVersion right ApiVersion Returns bool operator !=(ApiVersion, ApiVersion) public static bool operator !=(ApiVersion left, ApiVersion right) Parameters left ApiVersion right ApiVersion Returns bool"
  },
  "api/OpenServiceBroker.AsyncOperation.html": {
    "href": "api/OpenServiceBroker.AsyncOperation.html",
    "title": "Class AsyncOperation | OpenServiceBroker for .NET",
    "summary": "Class AsyncOperation Namespace OpenServiceBroker Assembly OpenServiceBroker.Model.dll public class AsyncOperation : ICompletable, IEquatable<AsyncOperation> Inheritance object AsyncOperation Implements ICompletable IEquatable<AsyncOperation> Derived ServiceBindingAsyncOperation ServiceInstanceAsyncOperation Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Completable.Complete<TCompletable>(TCompletable) CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Completed Indicates whether this operation has already been completed synchronously and therefore requires no polling. [JsonIgnore] public bool Completed { get; set; } Property Value bool Remarks This is not part of the Open Service Broker JSON representation. Instead it is communicated out of band via HTTP status codes. Operation [JsonProperty(\"operation\")] public string Operation { get; set; } Property Value string Methods Equals(AsyncOperation) Indicates whether the current object is equal to another object of the same type. public bool Equals(AsyncOperation other) Parameters other AsyncOperation An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Bindings.IServiceBindingBase.html": {
    "href": "api/OpenServiceBroker.Bindings.IServiceBindingBase.html",
    "title": "Interface IServiceBindingBase | OpenServiceBroker for .NET",
    "summary": "Interface IServiceBindingBase Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Server.dll Common base for IServiceBindingBlocking and IServiceBindingDeferred; do not use directly! public interface IServiceBindingBase Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Methods FetchAsync(string, string) fetches a Service Binding Task<ServiceBindingResource> FetchAsync(string instanceId, string bindingId) Parameters instanceId string The id of instance associated with the binding. bindingId string binding id of binding to fetch Returns Task<ServiceBindingResource> Exceptions NotFoundException The binding does not exist or a binding operation is still in progress."
  },
  "api/OpenServiceBroker.Bindings.IServiceBindingBlocking.html": {
    "href": "api/OpenServiceBroker.Bindings.IServiceBindingBlocking.html",
    "title": "Interface IServiceBindingBlocking | OpenServiceBroker for .NET",
    "summary": "Interface IServiceBindingBlocking Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Server.dll Manages bindings for Service Instances with blocking operations. public interface IServiceBindingBlocking : IServiceBindingBase Inherited Members IServiceBindingBase.FetchAsync(string, string) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Methods BindAsync(ServiceBindingContext, ServiceBindingRequest) generates a Service Binding Task<ServiceBinding> BindAsync(ServiceBindingContext context, ServiceBindingRequest request) Parameters context ServiceBindingContext The id of binding to create. request ServiceBindingRequest Parameters for the requested Service Binding. Returns Task<ServiceBinding> Exceptions ConflictException An instance with the same id already exists but with different attributes. UnbindAsync(ServiceBindingContext, string, string) deletes a Service Binding Task UnbindAsync(ServiceBindingContext context, string serviceId, string planId) Parameters context ServiceBindingContext The id of the binding being deleted. serviceId string The id of the service associated with the binding being deleted. planId string The id of the plan associated with the binding being deleted. Returns Task Exceptions GoneException The binding does not exist (anymore)."
  },
  "api/OpenServiceBroker.Bindings.IServiceBindingDeferred.html": {
    "href": "api/OpenServiceBroker.Bindings.IServiceBindingDeferred.html",
    "title": "Interface IServiceBindingDeferred | OpenServiceBroker for .NET",
    "summary": "Interface IServiceBindingDeferred Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Server.dll Manages bindings for Service Instances with potentially deferred (asynchronous) operations. public interface IServiceBindingDeferred : IServiceBindingBase Inherited Members IServiceBindingBase.FetchAsync(string, string) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Methods BindAsync(ServiceBindingContext, ServiceBindingRequest) Generates a Service Binding. Task<ServiceBindingAsyncOperation> BindAsync(ServiceBindingContext context, ServiceBindingRequest request) Parameters context ServiceBindingContext The id of binding to create. request ServiceBindingRequest Parameters for the requested Service Binding. Returns Task<ServiceBindingAsyncOperation> A potentially deferred (asynchronous) operation. Exceptions ConflictException A binding with the same id already exists but with different attributes. GetLastOperationAsync(ServiceBindingContext, string?, string?, string?) Gets the state of the last requested deferred (asynchronous) operation for a Service Binding. Task<LastOperationResource> GetLastOperationAsync(ServiceBindingContext context, string? serviceId = null, string? planId = null, string? operation = null) Parameters context ServiceBindingContext The id of Service Binding to find last operation applied to it serviceId string The id of the service associated with the binding. planId string The id of the plan associated with the binding. operation string The value provided in Operation. Returns Task<LastOperationResource> Exceptions GoneException The binding requested to be deleted does not exist (anymore). UnbindAsync(ServiceBindingContext, string, string) Deletes a Service Binding. Task<AsyncOperation> UnbindAsync(ServiceBindingContext context, string serviceId, string planId) Parameters context ServiceBindingContext The id of the binding being deleted. serviceId string The id of the service associated with the binding being deleted. planId string The id of the plan associated with the binding being deleted. Returns Task<AsyncOperation> A potentially deferred (asynchronous) operation. Exceptions GoneException The binding does not exist (anymore)."
  },
  "api/OpenServiceBroker.Bindings.IServiceBindingDeferredEndpoint.html": {
    "href": "api/OpenServiceBroker.Bindings.IServiceBindingDeferredEndpoint.html",
    "title": "Interface IServiceBindingDeferredEndpoint | OpenServiceBroker for .NET",
    "summary": "Interface IServiceBindingDeferredEndpoint Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Client.dll Represents a Service Binding for a specific Service Instance with potentially deferred (asynchronous) operations. public interface IServiceBindingDeferredEndpoint : IServiceBindingEndpointBase, IEndpoint Inherited Members IServiceBindingEndpointBase.FetchAsync() IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Remarks What a Service Instance represents can vary by service. Examples include a single database on a multi-tenant server, a dedicated cluster, or an account on a web application. Methods BindAsync(ServiceBindingRequest) Generates the Service Binding. Task<ServiceBindingAsyncOperation> BindAsync(ServiceBindingRequest request) Parameters request ServiceBindingRequest Parameters for the requested Service Binding. Returns Task<ServiceBindingAsyncOperation> A potentially deferred (asynchronous) operation. If Completed is false, start polling LastOperation(string?, string?, string?). Exceptions ConflictException A binding with the same id already exists but with different attributes. LastOperation(string?, string?, string?) Provides an endpoint to obtain the state of the last requested deferred (asynchronous) operation. IPollingEndpoint<LastOperationResource> LastOperation(string? serviceId = null, string? planId = null, string? operation = null) Parameters serviceId string If present, it MUST be the ID of the service being used. planId string If present, it MUST be the ID of the plan for the Service Instance. If this endpoint is being polled as a result of changing the plan through a Service Instance Update, the ID of the plan prior to the update MUST be used. operation string A Service Broker-provided identifier for the operation. When a value for operation is included with deferred (asynchronous) responses for Provision, Update, and Deprovision requests, the Platform MUST provide the same value using this query parameter. If present, MUST be a non-empty string. Returns IPollingEndpoint<LastOperationResource> UnbindAsync(string, string) Unbinds/deletes the Service Binding. Task<AsyncOperation> UnbindAsync(string serviceId, string planId) Parameters serviceId string The id of the service associated with the binding being deleted. planId string The id of the plan associated with the binding being deleted. Returns Task<AsyncOperation> A potentially deferred (asynchronous) operation. If Completed is false, start polling LastOperation(string?, string?, string?). Exceptions GoneException The binding does not exist (anymore)."
  },
  "api/OpenServiceBroker.Bindings.IServiceBindingEndpoint.html": {
    "href": "api/OpenServiceBroker.Bindings.IServiceBindingEndpoint.html",
    "title": "Interface IServiceBindingEndpoint | OpenServiceBroker for .NET",
    "summary": "Interface IServiceBindingEndpoint Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Client.dll Represents a Service Binding for a specific Service Instance with blocking operations. public interface IServiceBindingEndpoint : IServiceBindingEndpointBase, IEndpoint Inherited Members IServiceBindingEndpointBase.FetchAsync() IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Remarks What a Service Instance represents can vary by service. Examples include a single database on a multi-tenant server, a dedicated cluster, or an account on a web application. Methods BindAsync(ServiceBindingRequest) Generates the Service Binding. Task<ServiceBinding> BindAsync(ServiceBindingRequest request) Parameters request ServiceBindingRequest Parameters for the requested Service Binding. Returns Task<ServiceBinding> The binding. Exceptions ConflictException A binding with the same id already exists but with different attributes. UnbindAsync(string, string) Unbinds/deletes the Service Binding. Task UnbindAsync(string serviceId, string planId) Parameters serviceId string The id of the service associated with the binding being deleted. planId string The id of the plan associated with the binding being deleted. Returns Task Exceptions GoneException The binding does not exist (anymore)."
  },
  "api/OpenServiceBroker.Bindings.IServiceBindingEndpointBase.html": {
    "href": "api/OpenServiceBroker.Bindings.IServiceBindingEndpointBase.html",
    "title": "Interface IServiceBindingEndpointBase | OpenServiceBroker for .NET",
    "summary": "Interface IServiceBindingEndpointBase Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Client.dll Common base for IServiceBindingEndpoint and IServiceBindingDeferredEndpoint; do not use directly! public interface IServiceBindingEndpointBase : IEndpoint Inherited Members IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Methods FetchAsync() Fetches the Service Binding. Task<ServiceBindingResource> FetchAsync() Returns Task<ServiceBindingResource> Exceptions NotFoundException The binding does not exist or a binding operation is still in progress."
  },
  "api/OpenServiceBroker.Bindings.ServiceBinding.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBinding.html",
    "title": "Class ServiceBinding | OpenServiceBroker for .NET",
    "summary": "Class ServiceBinding Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Model.dll public class ServiceBinding : ServiceBindingBase, IUnchangedFlag, IEquatable<ServiceBinding> Inheritance object ServiceBindingBase ServiceBinding Implements IUnchangedFlag IEquatable<ServiceBinding> Inherited Members ServiceBindingBase.Credentials ServiceBindingBase.SyslogDrainUrl ServiceBindingBase.RouteServiceUrl ServiceBindingBase.VolumeMounts ServiceBindingBase.ShouldSerializeVolumeMounts() ServiceBindingBase.Equals(ServiceBindingBase) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Unchanged Indicates whether the request operation resulted in no changes to the existing state. [JsonIgnore] public bool Unchanged { get; set; } Property Value bool Remarks This is not part of the Open Service Broker JSON representation. Instead it is communicated out of band via HTTP status codes. Methods Equals(ServiceBinding) Indicates whether the current object is equal to another object of the same type. public bool Equals(ServiceBinding other) Parameters other ServiceBinding An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Bindings.ServiceBindingAsyncOperation.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBindingAsyncOperation.html",
    "title": "Class ServiceBindingAsyncOperation | OpenServiceBroker for .NET",
    "summary": "Class ServiceBindingAsyncOperation Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Model.dll public class ServiceBindingAsyncOperation : AsyncOperation, IEquatable<AsyncOperation>, ICompletableWithResult<ServiceBinding>, ICompletable Inheritance object AsyncOperation ServiceBindingAsyncOperation Implements IEquatable<AsyncOperation> ICompletableWithResult<ServiceBinding> ICompletable Inherited Members AsyncOperation.Operation AsyncOperation.Completed AsyncOperation.Equals(AsyncOperation) AsyncOperation.Equals(object) AsyncOperation.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Completable.Complete<TCompletable>(TCompletable) CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Result If Completed is true this holds the result of the operation. [JsonIgnore] public ServiceBinding Result { get; set; } Property Value ServiceBinding Remarks This is not part of the Open Service Broker JSON representation. Instead it is communicated out of band via HTTP status codes."
  },
  "api/OpenServiceBroker.Bindings.ServiceBindingBase.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBindingBase.html",
    "title": "Class ServiceBindingBase | OpenServiceBroker for .NET",
    "summary": "Class ServiceBindingBase Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Model.dll public abstract class ServiceBindingBase Inheritance object ServiceBindingBase Derived ServiceBinding ServiceBindingResource Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Credentials A free-form hash of credentials that can be used by applications or users to access the service. MUST be returned if the Service Broker supports generation of credentials. [JsonProperty(\"credentials\", NullValueHandling = NullValueHandling.Ignore)] public JObject Credentials { get; set; } Property Value JObject RouteServiceUrl A URL to which the Platform MUST proxy requests for the address sent with Route in the request body. Requires: RouteForwarding MUST be declared in the Catalog endpoint or the Platform can consider the response invalid. [JsonProperty(\"route_service_url\", NullValueHandling = NullValueHandling.Ignore)] public Uri RouteServiceUrl { get; set; } Property Value Uri SyslogDrainUrl A URL to which logs MUST be streamed. Requires: SyslogDrain MUST be declared in the Catalog endpoint or the Platform can consider the response invalid. [JsonProperty(\"syslog_drain_url\", NullValueHandling = NullValueHandling.Ignore)] public Uri SyslogDrainUrl { get; set; } Property Value Uri VolumeMounts An array of configuration for remote storage devices to be mounted into an application container filesystem. Requires: VolumeMount MUST be declared in the Catalog endpoint or the Platform can consider the response invalid. [JsonProperty(\"volume_mounts\")] public List<ServiceBindingVolumeMount> VolumeMounts { get; } Property Value List<ServiceBindingVolumeMount> Methods Equals(ServiceBindingBase) protected bool Equals(ServiceBindingBase other) Parameters other ServiceBindingBase Returns bool Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ShouldSerializeVolumeMounts() Do not serialize volume mounts if there are none. On some platforms (PCF for example), binding credentials to an application fails when an empty list of volume mounts is returned. public bool ShouldSerializeVolumeMounts() Returns bool"
  },
  "api/OpenServiceBroker.Bindings.ServiceBindingBlockingEndpoint.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBindingBlockingEndpoint.html",
    "title": "Class ServiceBindingBlockingEndpoint | OpenServiceBroker for .NET",
    "summary": "Class ServiceBindingBlockingEndpoint Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Client.dll Represents a Service Binding for a specific Service Instance with blocking operations. If the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. public class ServiceBindingBlockingEndpoint : ServiceBindingEndpointBase, IServiceBindingEndpoint, IServiceBindingEndpointBase, IEndpoint Inheritance object EndpointBase ServiceBrokerEndpointBase ServiceBindingEndpointBase ServiceBindingBlockingEndpoint Implements IServiceBindingEndpoint IServiceBindingEndpointBase IEndpoint Inherited Members ServiceBindingEndpointBase.FetchAsync() ServiceBrokerEndpointBase.GetDeleteUri(string, string) ServiceBrokerEndpointBase.ParseDeferredResponseAsync(HttpResponseMessage) ServiceBrokerEndpointBase.ParseDeferredResponseAsync<TComplete, TDeferred>(HttpResponseMessage) ServiceBrokerEndpointBase.FromContentAsync<T>(HttpResponseMessage) EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ServiceBindingBlockingEndpoint(IEndpoint, Uri) Represents a Service Binding for a specific Service Instance with blocking operations. If the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. public ServiceBindingBlockingEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Methods BindAsync(ServiceBindingRequest) Generates the Service Binding. public Task<ServiceBinding> BindAsync(ServiceBindingRequest request) Parameters request ServiceBindingRequest Parameters for the requested Service Binding. Returns Task<ServiceBinding> The binding. Exceptions ConflictException A binding with the same id already exists but with different attributes. UnbindAsync(string, string) Unbinds/deletes the Service Binding. public Task UnbindAsync(string serviceId, string planId) Parameters serviceId string The id of the service associated with the binding being deleted. planId string The id of the plan associated with the binding being deleted. Returns Task Exceptions GoneException The binding does not exist (anymore)."
  },
  "api/OpenServiceBroker.Bindings.ServiceBindingContext.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBindingContext.html",
    "title": "Class ServiceBindingContext | OpenServiceBroker for .NET",
    "summary": "Class ServiceBindingContext Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Server.dll Identifies a specific Service Binding to apply an operation to. public class ServiceBindingContext : ServiceInstanceContext, IEquatable<ServiceInstanceContext>, IEquatable<ServiceBindingContext> Inheritance object ServiceInstanceContext ServiceBindingContext Implements IEquatable<ServiceInstanceContext> IEquatable<ServiceBindingContext> Inherited Members ServiceInstanceContext.InstanceId ServiceInstanceContext.OriginatingIdentity ServiceInstanceContext.Equals(ServiceInstanceContext) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ServiceBindingContext(string, string) Creates a new Service Binding context. public ServiceBindingContext(string instanceId, string bindingId) Parameters instanceId string The ID of the Service Instance. bindingId string The ID of the Service Binding. ServiceBindingContext(string, string, OriginatingIdentity?) Creates a new Service Binding context. public ServiceBindingContext(string instanceId, string bindingId, OriginatingIdentity? originatingIdentity) Parameters instanceId string The ID of the Service Instance. bindingId string The ID of the Service Binding. originatingIdentity OriginatingIdentity Describes the identity of the user that initiated a request from the Platform. Properties BindingId The ID of the Service Binding. public string BindingId { get; } Property Value string Methods Equals(ServiceBindingContext?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ServiceBindingContext? other) Parameters other ServiceBindingContext An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ServiceBindingContext?, ServiceBindingContext?) public static bool operator ==(ServiceBindingContext? left, ServiceBindingContext? right) Parameters left ServiceBindingContext right ServiceBindingContext Returns bool operator !=(ServiceBindingContext?, ServiceBindingContext?) public static bool operator !=(ServiceBindingContext? left, ServiceBindingContext? right) Parameters left ServiceBindingContext right ServiceBindingContext Returns bool"
  },
  "api/OpenServiceBroker.Bindings.ServiceBindingDeferredEndpoint.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBindingDeferredEndpoint.html",
    "title": "Class ServiceBindingDeferredEndpoint | OpenServiceBroker for .NET",
    "summary": "Class ServiceBindingDeferredEndpoint Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Client.dll Represents a Service Binding for a specific Service Instance with potentially deferred (asynchronous) operations. public class ServiceBindingDeferredEndpoint : ServiceBindingEndpointBase, IServiceBindingDeferredEndpoint, IServiceBindingEndpointBase, IEndpoint Inheritance object EndpointBase ServiceBrokerEndpointBase ServiceBindingEndpointBase ServiceBindingDeferredEndpoint Implements IServiceBindingDeferredEndpoint IServiceBindingEndpointBase IEndpoint Inherited Members ServiceBindingEndpointBase.FetchAsync() ServiceBrokerEndpointBase.GetDeleteUri(string, string) ServiceBrokerEndpointBase.ParseDeferredResponseAsync(HttpResponseMessage) ServiceBrokerEndpointBase.ParseDeferredResponseAsync<TComplete, TDeferred>(HttpResponseMessage) ServiceBrokerEndpointBase.FromContentAsync<T>(HttpResponseMessage) EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ServiceBindingDeferredEndpoint(IEndpoint, Uri) Represents a Service Binding for a specific Service Instance with potentially deferred (asynchronous) operations. public ServiceBindingDeferredEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Methods BindAsync(ServiceBindingRequest) Generates the Service Binding. public Task<ServiceBindingAsyncOperation> BindAsync(ServiceBindingRequest request) Parameters request ServiceBindingRequest Parameters for the requested Service Binding. Returns Task<ServiceBindingAsyncOperation> A potentially deferred (asynchronous) operation. If Completed is false, start polling LastOperation(string?, string?, string?). Exceptions ConflictException A binding with the same id already exists but with different attributes. LastOperation(string?, string?, string?) Provides an endpoint to obtain the state of the last requested deferred (asynchronous) operation. public IPollingEndpoint<LastOperationResource> LastOperation(string? serviceId = null, string? planId = null, string? operation = null) Parameters serviceId string If present, it MUST be the ID of the service being used. planId string If present, it MUST be the ID of the plan for the Service Instance. If this endpoint is being polled as a result of changing the plan through a Service Instance Update, the ID of the plan prior to the update MUST be used. operation string A Service Broker-provided identifier for the operation. When a value for operation is included with deferred (asynchronous) responses for Provision, Update, and Deprovision requests, the Platform MUST provide the same value using this query parameter. If present, MUST be a non-empty string. Returns IPollingEndpoint<LastOperationResource> UnbindAsync(string, string) Unbinds/deletes the Service Binding. public Task<AsyncOperation> UnbindAsync(string serviceId, string planId) Parameters serviceId string The id of the service associated with the binding being deleted. planId string The id of the plan associated with the binding being deleted. Returns Task<AsyncOperation> A potentially deferred (asynchronous) operation. If Completed is false, start polling LastOperation(string?, string?, string?). Exceptions GoneException The binding does not exist (anymore)."
  },
  "api/OpenServiceBroker.Bindings.ServiceBindingEndpointBase.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBindingEndpointBase.html",
    "title": "Class ServiceBindingEndpointBase | OpenServiceBroker for .NET",
    "summary": "Class ServiceBindingEndpointBase Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Client.dll A Service Binding endpoint. public abstract class ServiceBindingEndpointBase : ServiceBrokerEndpointBase, IServiceBindingEndpointBase, IEndpoint Inheritance object EndpointBase ServiceBrokerEndpointBase ServiceBindingEndpointBase Implements IServiceBindingEndpointBase IEndpoint Derived ServiceBindingBlockingEndpoint ServiceBindingDeferredEndpoint ServiceBindingPollingEndpoint Inherited Members ServiceBrokerEndpointBase.GetDeleteUri(string, string) ServiceBrokerEndpointBase.ParseDeferredResponseAsync(HttpResponseMessage) ServiceBrokerEndpointBase.ParseDeferredResponseAsync<TComplete, TDeferred>(HttpResponseMessage) ServiceBrokerEndpointBase.FromContentAsync<T>(HttpResponseMessage) EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ServiceBindingEndpointBase(IEndpoint, Uri, bool) A Service Binding endpoint. protected ServiceBindingEndpointBase(IEndpoint referrer, Uri relativeUri, bool acceptsIncomplete = false) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. acceptsIncomplete bool A value of true indicates that the Platform and its clients support deferred (asynchronous) Service Broker operations. If this parameter is false, and the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. Methods FetchAsync() Fetches the Service Binding. public Task<ServiceBindingResource> FetchAsync() Returns Task<ServiceBindingResource> Exceptions NotFoundException The binding does not exist or a binding operation is still in progress."
  },
  "api/OpenServiceBroker.Bindings.ServiceBindingPollingEndpoint.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBindingPollingEndpoint.html",
    "title": "Class ServiceBindingPollingEndpoint | OpenServiceBroker for .NET",
    "summary": "Class ServiceBindingPollingEndpoint Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Client.dll Represents a Service Binding for a specific Service Instance. Uses potentially deferred (asynchronous) operations and automatically handles polling to make them appear blocking. public class ServiceBindingPollingEndpoint : ServiceBindingEndpointBase, IServiceBindingEndpoint, IServiceBindingEndpointBase, IEndpoint Inheritance object EndpointBase ServiceBrokerEndpointBase ServiceBindingEndpointBase ServiceBindingPollingEndpoint Implements IServiceBindingEndpoint IServiceBindingEndpointBase IEndpoint Inherited Members ServiceBindingEndpointBase.FetchAsync() ServiceBrokerEndpointBase.GetDeleteUri(string, string) ServiceBrokerEndpointBase.ParseDeferredResponseAsync(HttpResponseMessage) ServiceBrokerEndpointBase.ParseDeferredResponseAsync<TComplete, TDeferred>(HttpResponseMessage) ServiceBrokerEndpointBase.FromContentAsync<T>(HttpResponseMessage) EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ServiceBindingPollingEndpoint(IEndpoint, Uri) Represents a Service Binding for a specific Service Instance. Uses potentially deferred (asynchronous) operations and automatically handles polling to make them appear blocking. public ServiceBindingPollingEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Methods BindAsync(ServiceBindingRequest) Generates the Service Binding. public Task<ServiceBinding> BindAsync(ServiceBindingRequest request) Parameters request ServiceBindingRequest Parameters for the requested Service Binding. Returns Task<ServiceBinding> The binding. Exceptions ConflictException A binding with the same id already exists but with different attributes. UnbindAsync(string, string) Unbinds/deletes the Service Binding. public Task UnbindAsync(string serviceId, string planId) Parameters serviceId string The id of the service associated with the binding being deleted. planId string The id of the plan associated with the binding being deleted. Returns Task Exceptions GoneException The binding does not exist (anymore)."
  },
  "api/OpenServiceBroker.Bindings.ServiceBindingRequest.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBindingRequest.html",
    "title": "Class ServiceBindingRequest | OpenServiceBroker for .NET",
    "summary": "Class ServiceBindingRequest Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Model.dll public class ServiceBindingRequest : IServicePlanReference, IEquatable<ServiceBindingRequest> Inheritance object ServiceBindingRequest Implements IServicePlanReference IEquatable<ServiceBindingRequest> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties AppGuid GUID of an application associated with the binding to be created. If present, MUST be a non-empty string. [JsonProperty(\"app_guid\")] [Obsolete(\"Deprecated in favor of BindResource.AppGuid\")] public string AppGuid { get; set; } Property Value string BindResource An object that contains data for Platform resources associated with the binding to be created. [JsonProperty(\"bind_resource\")] public ServiceBindingResourceObject BindResource { get; set; } Property Value ServiceBindingResourceObject Context Contextual data under which the Service Binding is created. [JsonProperty(\"context\")] public JObject Context { get; set; } Property Value JObject Parameters Configuration parameters for the Service Binding. Service Brokers SHOULD ensure that the client has provided valid configuration parameters and values for the operation. [JsonProperty(\"parameters\")] public JObject Parameters { get; set; } Property Value JObject PlanId MUST be the ID of the plan from the service that is being used. [JsonProperty(\"plan_id\", Required = Required.Always)] public string PlanId { get; set; } Property Value string ServiceId MUST be the ID of the service that is being used. [JsonProperty(\"service_id\", Required = Required.Always)] public string ServiceId { get; set; } Property Value string Methods Equals(ServiceBindingRequest) Indicates whether the current object is equal to another object of the same type. public bool Equals(ServiceBindingRequest other) Parameters other ServiceBindingRequest An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Bindings.ServiceBindingResource.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBindingResource.html",
    "title": "Class ServiceBindingResource | OpenServiceBroker for .NET",
    "summary": "Class ServiceBindingResource Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Model.dll public class ServiceBindingResource : ServiceBindingBase, IEquatable<ServiceBindingResource> Inheritance object ServiceBindingBase ServiceBindingResource Implements IEquatable<ServiceBindingResource> Inherited Members ServiceBindingBase.Credentials ServiceBindingBase.SyslogDrainUrl ServiceBindingBase.RouteServiceUrl ServiceBindingBase.VolumeMounts ServiceBindingBase.ShouldSerializeVolumeMounts() ServiceBindingBase.Equals(ServiceBindingBase) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Parameters Configuration parameters for the Service Binding. [JsonProperty(\"parameters\")] public JObject Parameters { get; set; } Property Value JObject Methods Equals(ServiceBindingResource) Indicates whether the current object is equal to another object of the same type. public bool Equals(ServiceBindingResource other) Parameters other ServiceBindingResource An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Bindings.ServiceBindingResourceObject.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBindingResourceObject.html",
    "title": "Class ServiceBindingResourceObject | OpenServiceBroker for .NET",
    "summary": "Class ServiceBindingResourceObject Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Model.dll public class ServiceBindingResourceObject : IEquatable<ServiceBindingResourceObject> Inheritance object ServiceBindingResourceObject Implements IEquatable<ServiceBindingResourceObject> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties AppGuid GUID of an application associated with the binding. For credentials bindings. MUST be unique within the scope of the Platform. [JsonProperty(\"app_guid\")] public string AppGuid { get; set; } Property Value string Route URL of the application to be intermediated. For route services bindings. [JsonProperty(\"route\")] public string Route { get; set; } Property Value string Methods Equals(ServiceBindingResourceObject) Indicates whether the current object is equal to another object of the same type. public bool Equals(ServiceBindingResourceObject other) Parameters other ServiceBindingResourceObject An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Bindings.ServiceBindingVolumeMount.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBindingVolumeMount.html",
    "title": "Class ServiceBindingVolumeMount | OpenServiceBroker for .NET",
    "summary": "Class ServiceBindingVolumeMount Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Model.dll public class ServiceBindingVolumeMount Inheritance object ServiceBindingVolumeMount Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties ContainerDir The path in the application container onto which the volume will be mounted. This specification does not mandate what action the Platform is to take if the path specified already exists in the container. [JsonProperty(\"container_dir\", Required = Required.Always)] public string ContainerDir { get; set; } Property Value string Device Device object containing specific details. [JsonProperty(\"device\", Required = Required.Always)] public ServiceBindingVolumeMountDevice Device { get; set; } Property Value ServiceBindingVolumeMountDevice DeviceType The type of device to mount. [JsonProperty(\"device_type\", Required = Required.Always)] [JsonConverter(typeof(StringEnumConverter))] public ServiceBindingVolumeMountDeviceType DeviceType { get; set; } Property Value ServiceBindingVolumeMountDeviceType Driver Name of the volume driver plugin which manages the device. [JsonProperty(\"driver\", Required = Required.Always)] public string Driver { get; set; } Property Value string Mode The access mode to mount the device in. [JsonProperty(\"mode\", Required = Required.Always)] [JsonConverter(typeof(StringEnumConverter))] public ServiceBindingVolumeMountMode Mode { get; set; } Property Value ServiceBindingVolumeMountMode"
  },
  "api/OpenServiceBroker.Bindings.ServiceBindingVolumeMountDevice.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBindingVolumeMountDevice.html",
    "title": "Class ServiceBindingVolumeMountDevice | OpenServiceBroker for .NET",
    "summary": "Class ServiceBindingVolumeMountDevice Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Model.dll public class ServiceBindingVolumeMountDevice Inheritance object ServiceBindingVolumeMountDevice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties MountConfig Configuration object to be passed to the driver when the volume is mounted. [JsonProperty(\"mount_config\")] public JObject MountConfig { get; set; } Property Value JObject VolumeId ID of the shared volume to mount on every app instance. [JsonProperty(\"volume_id\", Required = Required.Always)] public string VolumeId { get; set; } Property Value string"
  },
  "api/OpenServiceBroker.Bindings.ServiceBindingVolumeMountDeviceType.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBindingVolumeMountDeviceType.html",
    "title": "Enum ServiceBindingVolumeMountDeviceType | OpenServiceBroker for .NET",
    "summary": "Enum ServiceBindingVolumeMountDeviceType Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Model.dll public enum ServiceBindingVolumeMountDeviceType Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Fields [EnumMember(Value = \"shared\")] Shared = 0"
  },
  "api/OpenServiceBroker.Bindings.ServiceBindingVolumeMountMode.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBindingVolumeMountMode.html",
    "title": "Enum ServiceBindingVolumeMountMode | OpenServiceBroker for .NET",
    "summary": "Enum ServiceBindingVolumeMountMode Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Model.dll public enum ServiceBindingVolumeMountMode Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Fields [EnumMember(Value = \"r\")] Read = 0 [EnumMember(Value = \"rw\")] ReadWrite = 1"
  },
  "api/OpenServiceBroker.Bindings.ServiceBindingsController.html": {
    "href": "api/OpenServiceBroker.Bindings.ServiceBindingsController.html",
    "title": "Class ServiceBindingsController | OpenServiceBroker for .NET",
    "summary": "Class ServiceBindingsController Namespace OpenServiceBroker.Bindings Assembly OpenServiceBroker.Server.dll Exposes bindings for Service Instances. [Route(\"v2/service_instances/{instance_id}/service_bindings/{binding_id}\")] public class ServiceBindingsController : BrokerControllerBase<IServiceBindingBlocking, IServiceBindingDeferred>, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller BrokerControllerBase<IServiceBindingBlocking, IServiceBindingDeferred> ServiceBindingsController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members BrokerControllerBase<IServiceBindingBlocking, IServiceBindingDeferred>.Do(bool, Func<IServiceBindingBlocking, Task<IActionResult>>, Func<IServiceBindingDeferred, Task<IActionResult>>) BrokerControllerBase<IServiceBindingBlocking, IServiceBindingDeferred>.SupportedApiVersion BrokerControllerBase<IServiceBindingBlocking, IServiceBindingDeferred>.Ok() BrokerControllerBase<IServiceBindingBlocking, IServiceBindingDeferred>.OriginatingIdentity BrokerControllerBase<IServiceBindingBlocking, IServiceBindingDeferred>.SetRetryAfter(TimeSpan) Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ServiceBindingsController(IServiceProvider) Exposes bindings for Service Instances. public ServiceBindingsController(IServiceProvider provider) Parameters provider IServiceProvider Methods Bind(string, string, ServiceBindingRequest, bool) Generates a Service Binding. [HttpPut(\"\")] [ProducesResponseType(typeof(ServiceBinding), 200)] [ProducesResponseType(typeof(ServiceBinding), 201)] [ProducesResponseType(typeof(AsyncOperation), 202)] [ProducesResponseType(typeof(Error), 400)] [ProducesResponseType(typeof(Error), 409)] [ProducesResponseType(typeof(Error), 422)] public Task<IActionResult> Bind(string instanceId, string bindingId, ServiceBindingRequest request, bool acceptsIncomplete = false) Parameters instanceId string The id of instance to create a binding on. bindingId string The binding id of binding to create. request ServiceBindingRequest Parameters for the requested Service Binding. acceptsIncomplete bool A value of true indicates that the Platform and its clients support deferred (asynchronous) Service Broker operations. If this parameter is false, and the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. Returns Task<IActionResult> Fetch(string, string) Fetches a Service Binding. [HttpGet(\"\")] [ProducesResponseType(typeof(ServiceBindingResource), 200)] [ProducesResponseType(typeof(Error), 404)] [ProducesResponseType(typeof(Error), 422)] public Task<IActionResult> Fetch(string instanceId, string bindingId) Parameters instanceId string The id of instance associated with the binding. bindingId string The binding id of binding to fetch Returns Task<IActionResult> GetLastOperation(string, string, string?, string?, string?) Gets the state of the last requested deferred (asynchronous) operation for a Service Binding. [HttpGet(\"last_operation\")] [ProducesResponseType(typeof(LastOperationResource), 200)] [ProducesResponseType(typeof(Error), 400)] [ProducesResponseType(typeof(Error), 410)] public Task<IActionResult> GetLastOperation(string instanceId, string bindingId, string? serviceId = null, string? planId = null, string? operation = null) Parameters instanceId string The id of instance to find last operation applied to it bindingId string The binding id of Service Binding to find last operation applied to it serviceId string The id of the service associated with the binding. planId string The id of the plan associated with the binding. operation string The value provided in Operation. Returns Task<IActionResult> Unbind(string, string, string, string, bool) Unbinds/deletes a Service Binding. [HttpDelete(\"\")] [ProducesResponseType(200)] [ProducesResponseType(typeof(AsyncOperation), 202)] [ProducesResponseType(typeof(Error), 400)] [ProducesResponseType(typeof(Error), 410)] [ProducesResponseType(typeof(Error), 422)] public Task<IActionResult> Unbind(string instanceId, string bindingId, string serviceId, string planId, bool acceptsIncomplete = false) Parameters instanceId string The id of the instance associated with the binding being deleted. bindingId string The id of the binding being deleted. serviceId string The id of the service associated with the binding being deleted. planId string The id of the plan associated with the binding being deleted. acceptsIncomplete bool A value of true indicates that the Platform and its clients support deferred (asynchronous) Service Broker operations. If this parameter is false, and the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. Returns Task<IActionResult>"
  },
  "api/OpenServiceBroker.Bindings.html": {
    "href": "api/OpenServiceBroker.Bindings.html",
    "title": "Namespace OpenServiceBroker.Bindings | OpenServiceBroker for .NET",
    "summary": "Namespace OpenServiceBroker.Bindings Classes ServiceBinding ServiceBindingAsyncOperation ServiceBindingBase ServiceBindingBlockingEndpoint Represents a Service Binding for a specific Service Instance with blocking operations. If the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. ServiceBindingContext Identifies a specific Service Binding to apply an operation to. ServiceBindingDeferredEndpoint Represents a Service Binding for a specific Service Instance with potentially deferred (asynchronous) operations. ServiceBindingEndpointBase A Service Binding endpoint. ServiceBindingPollingEndpoint Represents a Service Binding for a specific Service Instance. Uses potentially deferred (asynchronous) operations and automatically handles polling to make them appear blocking. ServiceBindingRequest ServiceBindingResource ServiceBindingResourceObject ServiceBindingVolumeMount ServiceBindingVolumeMountDevice ServiceBindingsController Exposes bindings for Service Instances. Interfaces IServiceBindingBase Common base for IServiceBindingBlocking and IServiceBindingDeferred; do not use directly! IServiceBindingBlocking Manages bindings for Service Instances with blocking operations. IServiceBindingDeferred Manages bindings for Service Instances with potentially deferred (asynchronous) operations. IServiceBindingDeferredEndpoint Represents a Service Binding for a specific Service Instance with potentially deferred (asynchronous) operations. IServiceBindingEndpoint Represents a Service Binding for a specific Service Instance with blocking operations. IServiceBindingEndpointBase Common base for IServiceBindingEndpoint and IServiceBindingDeferredEndpoint; do not use directly! Enums ServiceBindingVolumeMountDeviceType ServiceBindingVolumeMountMode"
  },
  "api/OpenServiceBroker.BrokerControllerBase-2.html": {
    "href": "api/OpenServiceBroker.BrokerControllerBase-2.html",
    "title": "Class BrokerControllerBase<TBlocking, TDeferred> | OpenServiceBroker for .NET",
    "summary": "Class BrokerControllerBase<TBlocking, TDeferred> Namespace OpenServiceBroker Assembly OpenServiceBroker.Server.dll Common base class for Open Service Broker API controllers. public abstract class BrokerControllerBase<TBlocking, TDeferred> : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Type Parameters TBlocking The service type to request from dependency injection for blocking operations. TDeferred The service type to request from dependency injection for deferred (asynchronous) operations. Inheritance object ControllerBase Controller BrokerControllerBase<TBlocking, TDeferred> Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Derived ServiceBindingsController ServiceInstancesController Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors BrokerControllerBase(IServiceProvider) Common base class for Open Service Broker API controllers. protected BrokerControllerBase(IServiceProvider provider) Parameters provider IServiceProvider Properties OriginatingIdentity Describes the identity of the user that initiated a request from the Platform. protected OriginatingIdentity? OriginatingIdentity { get; } Property Value OriginatingIdentity SupportedApiVersion The latest Open Service Broker API version currently supported. public static ApiVersion SupportedApiVersion { get; } Property Value ApiVersion Methods Do(bool, Func<TBlocking, Task<IActionResult>>, Func<TDeferred, Task<IActionResult>>) Performs either a blocking or a deferred operation, handling aspects such as API versioning and error serialization. protected Task<IActionResult> Do(bool acceptsIncomplete, Func<TBlocking, Task<IActionResult>> blocking, Func<TDeferred, Task<IActionResult>> deferred) Parameters acceptsIncomplete bool A value of true indicates that the Platform and its clients support deferred (asynchronous) Service Broker operations. If this parameter is false, and the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. blocking Func<TBlocking, Task<IActionResult>> A callback to invoke for blocking operations. deferred Func<TDeferred, Task<IActionResult>> A callback to invoke for deferred (asynchronous) operations. Returns Task<IActionResult> Ok() Creates an OK response with an empty JSON object in the body. protected OkObjectResult Ok() Returns OkObjectResult SetRetryAfter(TimeSpan) Sets the Retry-After response header. protected void SetRetryAfter(TimeSpan retryAfter) Parameters retryAfter TimeSpan"
  },
  "api/OpenServiceBroker.Catalogs.Catalog.html": {
    "href": "api/OpenServiceBroker.Catalogs.Catalog.html",
    "title": "Class Catalog | OpenServiceBroker for .NET",
    "summary": "Class Catalog Namespace OpenServiceBroker.Catalogs Assembly OpenServiceBroker.Model.dll A list of all services available on the Service Broker. public class Catalog Inheritance object Catalog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Services A list of all services available on the Service Broker. [JsonProperty(\"services\", Required = Required.Always)] public List<Service> Services { get; } Property Value List<Service>"
  },
  "api/OpenServiceBroker.Catalogs.CatalogController.html": {
    "href": "api/OpenServiceBroker.Catalogs.CatalogController.html",
    "title": "Class CatalogController | OpenServiceBroker for .NET",
    "summary": "Class CatalogController Namespace OpenServiceBroker.Catalogs Assembly OpenServiceBroker.Server.dll Exposes a list of all services available on the Service Broker. [Route(\"v2/catalog\")] public class CatalogController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller CatalogController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors CatalogController(ICatalogService) Exposes a list of all services available on the Service Broker. public CatalogController(ICatalogService catalogService) Parameters catalogService ICatalogService Methods Get() Gets the catalog of services that the service broker offers. [Route(\"\")] [HttpGet] public Task<IActionResult> Get() Returns Task<IActionResult>"
  },
  "api/OpenServiceBroker.Catalogs.DashboardClient.html": {
    "href": "api/OpenServiceBroker.Catalogs.DashboardClient.html",
    "title": "Class DashboardClient | OpenServiceBroker for .NET",
    "summary": "Class DashboardClient Namespace OpenServiceBroker.Catalogs Assembly OpenServiceBroker.Model.dll Contains the data necessary to activate the Dashboard SSO feature for this service. public class DashboardClient : IEquatable<DashboardClient> Inheritance object DashboardClient Implements IEquatable<DashboardClient> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Id The id of the OAuth client that the dashboard will use. If present, MUST be a non-empty string. [JsonProperty(\"id\")] public string Id { get; set; } Property Value string RedirectUri A URI for the service dashboard. Validated by the OAuth token server when the dashboard requests a token. [JsonProperty(\"redirect_uri\")] public Uri RedirectUri { get; set; } Property Value Uri Secret A secret for the dashboard client. If present, MUST be a non-empty string. [JsonProperty(\"secret\")] public string Secret { get; set; } Property Value string Methods Equals(DashboardClient) Indicates whether the current object is equal to another object of the same type. public bool Equals(DashboardClient other) Parameters other DashboardClient An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Catalogs.Features.html": {
    "href": "api/OpenServiceBroker.Catalogs.Features.html",
    "title": "Enum Features | OpenServiceBroker for .NET",
    "summary": "Enum Features Namespace OpenServiceBroker.Catalogs Assembly OpenServiceBroker.Model.dll Permissions for services. public enum Features Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Fields [EnumMember(Value = \"route_forwarding\")] RouteForwarding = 1 Route services are a class of Service Offerings that intermediate requests to applications, performing functions such as rate limiting or authorization. To indicate support for route services, the catalog entry for the Service MUST use this value. [EnumMember(Value = \"syslog_drain\")] SyslogDrain = 0 There are a class of Service Offerings that provide aggregation, indexing, and analysis of log data. To utilize these services an application that generates logs needs information for the location to which it will stream logs. A create binding response from a Service Broker that provides one of these services MUST include a SyslogDrainUrl. The Platform MUST use this value when sending logs to the service. [EnumMember(Value = \"volume_mount\")] VolumeMount = 2 There are a class of services that provide network storage to applications via volume mounts in the application container. A create binding response from one of these services MUST include VolumeMounts."
  },
  "api/OpenServiceBroker.Catalogs.ICatalogService.html": {
    "href": "api/OpenServiceBroker.Catalogs.ICatalogService.html",
    "title": "Interface ICatalogService | OpenServiceBroker for .NET",
    "summary": "Interface ICatalogService Namespace OpenServiceBroker.Catalogs Assembly OpenServiceBroker.Server.dll Provides access to the catalog of services that the service broker offers. public interface ICatalogService Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Methods GetCatalogAsync() Gets the catalog of services that the service broker offers. Task<Catalog> GetCatalogAsync() Returns Task<Catalog>"
  },
  "api/OpenServiceBroker.Catalogs.IETagProvider.html": {
    "href": "api/OpenServiceBroker.Catalogs.IETagProvider.html",
    "title": "Interface IETagProvider | OpenServiceBroker for .NET",
    "summary": "Interface IETagProvider Namespace OpenServiceBroker.Catalogs Assembly OpenServiceBroker.Server.dll Provides an ETag. public interface IETagProvider Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Remarks Implement this in addition to ICatalogService to enable ETag-based caching. Properties ETag The current ETag of the entity this service provides. Must be enclosed in quotes (\"). string ETag { get; } Property Value string"
  },
  "api/OpenServiceBroker.Catalogs.ILastModifiedProvider.html": {
    "href": "api/OpenServiceBroker.Catalogs.ILastModifiedProvider.html",
    "title": "Interface ILastModifiedProvider | OpenServiceBroker for .NET",
    "summary": "Interface ILastModifiedProvider Namespace OpenServiceBroker.Catalogs Assembly OpenServiceBroker.Server.dll Provides a last modified timestamp. public interface ILastModifiedProvider Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Remarks Implement this in addition to ICatalogService to enable timestamp-based caching. Properties LastModified The last time the entity this service provides was modified. DateTimeOffset LastModified { get; } Property Value DateTimeOffset"
  },
  "api/OpenServiceBroker.Catalogs.Plan.html": {
    "href": "api/OpenServiceBroker.Catalogs.Plan.html",
    "title": "Class Plan | OpenServiceBroker for .NET",
    "summary": "Class Plan Namespace OpenServiceBroker.Catalogs Assembly OpenServiceBroker.Model.dll Describes a plan for a service available on the Service Broker. public class Plan : IEquatable<Plan> Inheritance object Plan Implements IEquatable<Plan> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Bindable Specifies whether Service Instances of the Service Plan can be bound to applications. This field is OPTIONAL. If specified, this takes precedence over the bindable attribute of the service. If not specified, the default is derived from the service. [JsonProperty(\"bindable\", NullValueHandling = NullValueHandling.Ignore)] public bool? Bindable { get; set; } Property Value bool? Description A short description of the plan. MUST be a non-empty string. [JsonProperty(\"description\", Required = Required.Always)] public string Description { get; set; } Property Value string Free When false, Service Instances of this plan have a cost. The default is true. [JsonProperty(\"free\")] public bool Free { get; set; } Property Value bool Id An identifier used to correlate this plan in future requests to the Service Broker. This MUST be globally unique such that Platforms (and their users) MUST be able to assume that seeing the same value (no matter what Service Broker uses it) will always refer to this plan and for the same service. MUST be a non-empty string. Using a GUID is RECOMMENDED. [JsonProperty(\"id\", Required = Required.Always)] public string Id { get; set; } Property Value string MaintenanceInfo Maintenance information for a Service Instance which is provisioned using the Service Plan. [JsonProperty(\"maintenance_info\", NullValueHandling = NullValueHandling.Ignore)] public MaintenanceInfo MaintenanceInfo { get; set; } Property Value MaintenanceInfo MaximumPollingDuration A duration, in seconds, that the Platform SHOULD use as the Service's maximum polling duration. [JsonProperty(\"maximum_polling_duration\", NullValueHandling = NullValueHandling.Ignore)] public int? MaximumPollingDuration { get; set; } Property Value int? Metadata An opaque object of metadata for a Service Plan. It is expected that Platforms will treat this as a blob. Note that there are conventions in existing Service Brokers and Platforms for fields that aid in the display of catalog data. [JsonProperty(\"metadata\")] public JObject Metadata { get; set; } Property Value JObject Name The CLI-friendly name of the plan. MUST only contain alphanumeric characters, periods, and hyphens (no spaces). MUST be unique within the service. MUST be a non-empty string. [JsonProperty(\"name\", Required = Required.Always)] public string Name { get; set; } Property Value string PlanUpdateable Whether the Plan supports upgrade/downgrade/sidegrade to another version. This field is OPTIONAL. If specified, this takes precedence over PlanUpdateable. [JsonProperty(\"plan_updateable\", NullValueHandling = NullValueHandling.Ignore)] public bool? PlanUpdateable { get; set; } Property Value bool? Schemas Schema definitions for Service Instances and bindings for the plan. [JsonProperty(\"schemas\")] public Schemas Schemas { get; set; } Property Value Schemas Methods Equals(Plan) Indicates whether the current object is equal to another object of the same type. public bool Equals(Plan other) Parameters other Plan An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Catalogs.SchemaParameters.html": {
    "href": "api/OpenServiceBroker.Catalogs.SchemaParameters.html",
    "title": "Class SchemaParameters | OpenServiceBroker for .NET",
    "summary": "Class SchemaParameters Namespace OpenServiceBroker.Catalogs Assembly OpenServiceBroker.Model.dll A schema definition for the input parameters. public class SchemaParameters Inheritance object SchemaParameters Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Parameters The schema definition for the input parameters. Each input parameter is expressed as a property within a JSON object. [JsonProperty(\"parameters\")] public JsonSchema Parameters { get; set; } Property Value JsonSchema"
  },
  "api/OpenServiceBroker.Catalogs.Schemas.html": {
    "href": "api/OpenServiceBroker.Catalogs.Schemas.html",
    "title": "Class Schemas | OpenServiceBroker for .NET",
    "summary": "Class Schemas Namespace OpenServiceBroker.Catalogs Assembly OpenServiceBroker.Model.dll Schema definitions for Service Instances and bindings for a plan. public class Schemas Inheritance object Schemas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties ServiceBinding The schema definition for creating a Service Binding. Used only if the Service Plan is bindable. [JsonProperty(\"service_binding\")] public ServiceBindingSchema ServiceBinding { get; set; } Property Value ServiceBindingSchema ServiceInstance The schema definitions for creating and updating a Service Instance. [JsonProperty(\"service_instance\")] public ServiceInstanceSchema ServiceInstance { get; set; } Property Value ServiceInstanceSchema"
  },
  "api/OpenServiceBroker.Catalogs.Service.html": {
    "href": "api/OpenServiceBroker.Catalogs.Service.html",
    "title": "Class Service | OpenServiceBroker for .NET",
    "summary": "Class Service Namespace OpenServiceBroker.Catalogs Assembly OpenServiceBroker.Model.dll Describes a service available on the Service Broker. public class Service : IEquatable<Service> Inheritance object Service Implements IEquatable<Service> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Bindable Specifies whether Service Instances of the service can be bound to applications. This specifies the default for all plans of this service. Plans can override this field. [JsonProperty(\"bindable\", Required = Required.Always)] public bool Bindable { get; set; } Property Value bool See Also Plan BindingsRetrievable Specifies whether the Fetching a Service Binding endpoint is supported for all plans. [JsonProperty(\"bindings_retrievable\")] public bool BindingsRetrievable { get; set; } Property Value bool DashboardClient A Cloud Foundry extension described in Catalog Extensions. Contains the data necessary to activate the Dashboard SSO feature for this service. [JsonProperty(\"dashboard_client\")] public DashboardClient DashboardClient { get; set; } Property Value DashboardClient Description A short description of the service. MUST be a non-empty string. [JsonProperty(\"description\", Required = Required.Always)] public string Description { get; set; } Property Value string Id An identifier used to correlate this service in future requests to the Service Broker. This MUST be globally unique such that Platforms (and their users) MUST be able to assume that seeing the same value (no matter what Service Broker uses it) will always refer to this service. MUST be a non-empty string. Using a GUID is RECOMMENDED. [JsonProperty(\"id\", Required = Required.Always)] public string Id { get; set; } Property Value string InstancesRetrievable Specifies whether the Fetching a Service Instance endpoint is supported for all plans. [JsonProperty(\"instances_retrievable\")] public bool InstancesRetrievable { get; set; } Property Value bool Metadata An opaque object of metadata for a Service Offering. It is expected that Platforms will treat this as a blob. Note that there are conventions in existing Service Brokers and Platforms for fields that aid in the display of catalog data. [JsonProperty(\"metadata\")] public JObject Metadata { get; set; } Property Value JObject Name A CLI-friendly name of the service. MUST only contain alphanumeric characters, periods, and hyphens (no spaces). MUST be unique across all service objects returned in this response. MUST be a non-empty string. [JsonProperty(\"name\", Required = Required.Always)] public string Name { get; set; } Property Value string PlanUpdateable Whether the service supports upgrade/downgrade for some plans. [JsonProperty(\"plan_updateable\")] public bool PlanUpdateable { get; set; } Property Value bool Plans A list of plans for this service. MUST contain at least one plan. [JsonProperty(\"plans\", Required = Required.Always)] public List<Plan> Plans { get; } Property Value List<Plan> Requires A list of permissions that the user would have to give the service, if they provision it. [JsonProperty(\"requires\", ItemConverterType = typeof(StringEnumConverter))] public List<Features> Requires { get; } Property Value List<Features> Tags Tags provide a flexible mechanism to expose a classification, attribute, or base technology of a service, enabling equivalent services to be swapped out without changes to dependent logic in applications, buildpacks, or other services. E.g. mysql, relational, redis, key-value, caching, messaging, amqp. [JsonProperty(\"tags\")] public List<string> Tags { get; } Property Value List<string> Methods Equals(Service) Indicates whether the current object is equal to another object of the same type. public bool Equals(Service other) Parameters other Service An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Catalogs.ServiceBindingSchema.html": {
    "href": "api/OpenServiceBroker.Catalogs.ServiceBindingSchema.html",
    "title": "Class ServiceBindingSchema | OpenServiceBroker for .NET",
    "summary": "Class ServiceBindingSchema Namespace OpenServiceBroker.Catalogs Assembly OpenServiceBroker.Model.dll The schema definitions for creating and updating a Service Instance. public class ServiceBindingSchema Inheritance object ServiceBindingSchema Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Create The schema definition for creating a Service Binding. [JsonProperty(\"create\")] public SchemaParameters Create { get; set; } Property Value SchemaParameters"
  },
  "api/OpenServiceBroker.Catalogs.ServiceInstanceSchema.html": {
    "href": "api/OpenServiceBroker.Catalogs.ServiceInstanceSchema.html",
    "title": "Class ServiceInstanceSchema | OpenServiceBroker for .NET",
    "summary": "Class ServiceInstanceSchema Namespace OpenServiceBroker.Catalogs Assembly OpenServiceBroker.Model.dll The schema definitions for creating and updating a Service Instance. public class ServiceInstanceSchema Inheritance object ServiceInstanceSchema Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Create The schema definition for creating a Service Instance. [JsonProperty(\"create\")] public SchemaParameters Create { get; set; } Property Value SchemaParameters Update The schema definition for updating a Service Instance. [JsonProperty(\"update\")] public SchemaParameters Update { get; set; } Property Value SchemaParameters"
  },
  "api/OpenServiceBroker.Catalogs.html": {
    "href": "api/OpenServiceBroker.Catalogs.html",
    "title": "Namespace OpenServiceBroker.Catalogs | OpenServiceBroker for .NET",
    "summary": "Namespace OpenServiceBroker.Catalogs Classes Catalog A list of all services available on the Service Broker. CatalogController Exposes a list of all services available on the Service Broker. DashboardClient Contains the data necessary to activate the Dashboard SSO feature for this service. Plan Describes a plan for a service available on the Service Broker. SchemaParameters A schema definition for the input parameters. Schemas Schema definitions for Service Instances and bindings for a plan. Service Describes a service available on the Service Broker. ServiceBindingSchema The schema definitions for creating and updating a Service Instance. ServiceInstanceSchema The schema definitions for creating and updating a Service Instance. Interfaces ICatalogService Provides access to the catalog of services that the service broker offers. IETagProvider Provides an ETag. ILastModifiedProvider Provides a last modified timestamp. Enums Features Permissions for services."
  },
  "api/OpenServiceBroker.Completable.html": {
    "href": "api/OpenServiceBroker.Completable.html",
    "title": "Class Completable | OpenServiceBroker for .NET",
    "summary": "Class Completable Namespace OpenServiceBroker Assembly OpenServiceBroker.Model.dll public static class Completable Inheritance object Completable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Complete<TCompletable>(TCompletable) Marks an operation as already completed synchronously. public static TCompletable Complete<TCompletable>(this TCompletable completable) where TCompletable : ICompletable Parameters completable TCompletable The operation to mark. Returns TCompletable completable for fluent-style use. Type Parameters TCompletable"
  },
  "api/OpenServiceBroker.CompletableWithResult.html": {
    "href": "api/OpenServiceBroker.CompletableWithResult.html",
    "title": "Class CompletableWithResult | OpenServiceBroker for .NET",
    "summary": "Class CompletableWithResult Namespace OpenServiceBroker Assembly OpenServiceBroker.Model.dll public static class CompletableWithResult Inheritance object CompletableWithResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Complete<TCompletable, TResult>(TCompletable, TResult?) Marks an operation as already completed synchronously. public static TCompletable Complete<TCompletable, TResult>(this TCompletable completable, TResult? result) where TCompletable : ICompletableWithResult<TResult> where TResult : class Parameters completable TCompletable The operation to mark. result TResult The result of the operation. Returns TCompletable completable for fluent-style use. Type Parameters TCompletable TResult"
  },
  "api/OpenServiceBroker.Errors.ApiVersionNotSupportedException.html": {
    "href": "api/OpenServiceBroker.Errors.ApiVersionNotSupportedException.html",
    "title": "Class ApiVersionNotSupportedException | OpenServiceBroker for .NET",
    "summary": "Class ApiVersionNotSupportedException Namespace OpenServiceBroker.Errors Assembly OpenServiceBroker.Model.dll The API version request by the client is not supported by server. public class ApiVersionNotSupportedException : BrokerException, ISerializable Inheritance object Exception BrokerException ApiVersionNotSupportedException Implements ISerializable Inherited Members BrokerException.HttpCode BrokerException.InstanceUsable BrokerException.UpdateRepeatable BrokerException.ToResponse() BrokerException.FromResponse(Error, HttpStatusCode) Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ApiVersionNotSupportedException(string) The API version request by the client is not supported by server. public ApiVersionNotSupportedException(string message) Parameters message string Fields ErrorCode public const string ErrorCode = \"ApiVersionNotSupported\" Field Value string"
  },
  "api/OpenServiceBroker.Errors.AsyncRequiredException.html": {
    "href": "api/OpenServiceBroker.Errors.AsyncRequiredException.html",
    "title": "Class AsyncRequiredException | OpenServiceBroker for .NET",
    "summary": "Class AsyncRequiredException Namespace OpenServiceBroker.Errors Assembly OpenServiceBroker.Model.dll This request requires client support for deferred (asynchronous) service operations. public class AsyncRequiredException : BrokerException, ISerializable Inheritance object Exception BrokerException AsyncRequiredException Implements ISerializable Inherited Members BrokerException.HttpCode BrokerException.InstanceUsable BrokerException.UpdateRepeatable BrokerException.ToResponse() BrokerException.FromResponse(Error, HttpStatusCode) Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors AsyncRequiredException(string) This request requires client support for deferred (asynchronous) service operations. public AsyncRequiredException(string message = \"This request requires client support for asynchronous service operations.\") Parameters message string Fields ErrorCode public const string ErrorCode = \"AsyncRequired\" Field Value string"
  },
  "api/OpenServiceBroker.Errors.BadRequestException.html": {
    "href": "api/OpenServiceBroker.Errors.BadRequestException.html",
    "title": "Class BadRequestException | OpenServiceBroker for .NET",
    "summary": "Class BadRequestException Namespace OpenServiceBroker.Errors Assembly OpenServiceBroker.Model.dll The The request is malformed or missing mandatory data.. public class BadRequestException : BrokerException, ISerializable Inheritance object Exception BrokerException BadRequestException Implements ISerializable Inherited Members BrokerException.HttpCode BrokerException.InstanceUsable BrokerException.UpdateRepeatable BrokerException.ToResponse() BrokerException.FromResponse(Error, HttpStatusCode) Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors BadRequestException(string) The The request is malformed or missing mandatory data.. public BadRequestException(string message) Parameters message string Fields ErrorCode public const string ErrorCode = \"BadRequest\" Field Value string"
  },
  "api/OpenServiceBroker.Errors.BrokerException.html": {
    "href": "api/OpenServiceBroker.Errors.BrokerException.html",
    "title": "Class BrokerException | OpenServiceBroker for .NET",
    "summary": "Class BrokerException Namespace OpenServiceBroker.Errors Assembly OpenServiceBroker.Model.dll The request to the Service Broker failed. public class BrokerException : Exception, ISerializable Inheritance object Exception BrokerException Implements ISerializable Derived ApiVersionNotSupportedException AsyncRequiredException BadRequestException ConcurrencyException ConflictException GoneException MaintenanceInfoConflictException NotFoundException RequiresAppException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors BrokerException(string, string, HttpStatusCode) The request to the Service Broker failed. public BrokerException(string message, string errorCode, HttpStatusCode httpCode = HttpStatusCode.UnprocessableContent) Parameters message string errorCode string httpCode HttpStatusCode Properties ErrorCode public string ErrorCode { get; } Property Value string HttpCode public HttpStatusCode HttpCode { get; } Property Value HttpStatusCode InstanceUsable If an update or deprovisioning operation failed, this flag indicates whether or not the Service Instance is still usable. If true, the Service Instance can still be used, false otherwise. This field MUST NOT be present for errors of other operations. Defaults to true. public bool? InstanceUsable { get; set; } Property Value bool? UpdateRepeatable If an update operation failed, this flag indicates whether this update can be repeated or not. If true, the same update operation MAY be repeated and MAY succeed; if false, repeating the same update operation will fail again. This field MUST NOT be present for errors of other operations. Defaults to true. public bool? UpdateRepeatable { get; set; } Property Value bool? Methods FromResponse(Error, HttpStatusCode) Deserializes the exception from an error response object. public static BrokerException FromResponse(Error dto, HttpStatusCode statusCode) Parameters dto Error statusCode HttpStatusCode Returns BrokerException ToResponse() Serializes the exception to an error response object. public Error ToResponse() Returns Error"
  },
  "api/OpenServiceBroker.Errors.ConcurrencyException.html": {
    "href": "api/OpenServiceBroker.Errors.ConcurrencyException.html",
    "title": "Class ConcurrencyException | OpenServiceBroker for .NET",
    "summary": "Class ConcurrencyException Namespace OpenServiceBroker.Errors Assembly OpenServiceBroker.Model.dll The Service Broker does not support concurrent requests that mutate the same resource. public class ConcurrencyException : BrokerException, ISerializable Inheritance object Exception BrokerException ConcurrencyException Implements ISerializable Inherited Members BrokerException.HttpCode BrokerException.InstanceUsable BrokerException.UpdateRepeatable BrokerException.ToResponse() BrokerException.FromResponse(Error, HttpStatusCode) Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ConcurrencyException(string) The Service Broker does not support concurrent requests that mutate the same resource. public ConcurrencyException(string message = \"The Service Broker does not support concurrent requests that mutate the same resource.\") Parameters message string Fields ErrorCode public const string ErrorCode = \"ConcurrencyError\" Field Value string"
  },
  "api/OpenServiceBroker.Errors.ConflictException.html": {
    "href": "api/OpenServiceBroker.Errors.ConflictException.html",
    "title": "Class ConflictException | OpenServiceBroker for .NET",
    "summary": "Class ConflictException Namespace OpenServiceBroker.Errors Assembly OpenServiceBroker.Model.dll An instance with the same id already exists but with different attributes. public class ConflictException : BrokerException, ISerializable Inheritance object Exception BrokerException ConflictException Implements ISerializable Inherited Members BrokerException.HttpCode BrokerException.InstanceUsable BrokerException.UpdateRepeatable BrokerException.ToResponse() BrokerException.FromResponse(Error, HttpStatusCode) Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ConflictException() public ConflictException() ConflictException(string) An instance with the same id already exists but with different attributes. public ConflictException(string message) Parameters message string Fields ErrorCode public const string ErrorCode = \"Conflict\" Field Value string"
  },
  "api/OpenServiceBroker.Errors.Error.html": {
    "href": "api/OpenServiceBroker.Errors.Error.html",
    "title": "Class Error | OpenServiceBroker for .NET",
    "summary": "Class Error Namespace OpenServiceBroker.Errors Assembly OpenServiceBroker.Model.dll An error response object. public class Error : StatusBase Inheritance object StatusBase Error Inherited Members StatusBase.Description StatusBase.InstanceUsable StatusBase.UpdateRepeatable StatusBase.Equals(StatusBase) StatusBase.Equals(object) StatusBase.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties ErrorCode A single word in camel case that uniquely identifies the error condition. If present, MUST be a non-empty string. [JsonProperty(\"error\")] public string ErrorCode { get; set; } Property Value string"
  },
  "api/OpenServiceBroker.Errors.GoneException.html": {
    "href": "api/OpenServiceBroker.Errors.GoneException.html",
    "title": "Class GoneException | OpenServiceBroker for .NET",
    "summary": "Class GoneException Namespace OpenServiceBroker.Errors Assembly OpenServiceBroker.Model.dll The specified resource does not exist (anymore). public class GoneException : BrokerException, ISerializable Inheritance object Exception BrokerException GoneException Implements ISerializable Inherited Members BrokerException.HttpCode BrokerException.InstanceUsable BrokerException.UpdateRepeatable BrokerException.ToResponse() BrokerException.FromResponse(Error, HttpStatusCode) Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors GoneException() public GoneException() GoneException(string) The specified resource does not exist (anymore). public GoneException(string message) Parameters message string Fields ErrorCode public const string ErrorCode = \"Gone\" Field Value string"
  },
  "api/OpenServiceBroker.Errors.MaintenanceInfoConflictException.html": {
    "href": "api/OpenServiceBroker.Errors.MaintenanceInfoConflictException.html",
    "title": "Class MaintenanceInfoConflictException | OpenServiceBroker for .NET",
    "summary": "Class MaintenanceInfoConflictException Namespace OpenServiceBroker.Errors Assembly OpenServiceBroker.Model.dll The Version field provided in the request does not match theVersion field provided in the Service Broker's Catalog. public class MaintenanceInfoConflictException : BrokerException, ISerializable Inheritance object Exception BrokerException MaintenanceInfoConflictException Implements ISerializable Inherited Members BrokerException.HttpCode BrokerException.InstanceUsable BrokerException.UpdateRepeatable BrokerException.ToResponse() BrokerException.FromResponse(Error, HttpStatusCode) Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors MaintenanceInfoConflictException() public MaintenanceInfoConflictException() MaintenanceInfoConflictException(string) The Version field provided in the request does not match theVersion field provided in the Service Broker's Catalog. public MaintenanceInfoConflictException(string message) Parameters message string Fields ErrorCode public const string ErrorCode = \"MaintenanceInfoConflict\" Field Value string"
  },
  "api/OpenServiceBroker.Errors.NotFoundException.html": {
    "href": "api/OpenServiceBroker.Errors.NotFoundException.html",
    "title": "Class NotFoundException | OpenServiceBroker for .NET",
    "summary": "Class NotFoundException Namespace OpenServiceBroker.Errors Assembly OpenServiceBroker.Model.dll The resource does not exist or a provisioning operation is still in progress. public class NotFoundException : BrokerException, ISerializable Inheritance object Exception BrokerException NotFoundException Implements ISerializable Inherited Members BrokerException.HttpCode BrokerException.InstanceUsable BrokerException.UpdateRepeatable BrokerException.ToResponse() BrokerException.FromResponse(Error, HttpStatusCode) Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors NotFoundException() public NotFoundException() NotFoundException(string) The resource does not exist or a provisioning operation is still in progress. public NotFoundException(string message) Parameters message string Fields ErrorCode public const string ErrorCode = \"NotFound\" Field Value string"
  },
  "api/OpenServiceBroker.Errors.RequiresAppException.html": {
    "href": "api/OpenServiceBroker.Errors.RequiresAppException.html",
    "title": "Class RequiresAppException | OpenServiceBroker for .NET",
    "summary": "Class RequiresAppException Namespace OpenServiceBroker.Errors Assembly OpenServiceBroker.Model.dll The request body is missing the AppGuid field. public class RequiresAppException : BrokerException, ISerializable Inheritance object Exception BrokerException RequiresAppException Implements ISerializable Inherited Members BrokerException.HttpCode BrokerException.InstanceUsable BrokerException.UpdateRepeatable BrokerException.ToResponse() BrokerException.FromResponse(Error, HttpStatusCode) Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors RequiresAppException() public RequiresAppException() RequiresAppException(string) The request body is missing the AppGuid field. public RequiresAppException(string message) Parameters message string Fields ErrorCode public const string ErrorCode = \"RequiresApp\" Field Value string"
  },
  "api/OpenServiceBroker.Errors.StatusBase.html": {
    "href": "api/OpenServiceBroker.Errors.StatusBase.html",
    "title": "Class StatusBase | OpenServiceBroker for .NET",
    "summary": "Class StatusBase Namespace OpenServiceBroker.Errors Assembly OpenServiceBroker.Model.dll public abstract class StatusBase Inheritance object StatusBase Derived Error LastOperationResource Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Description A user-facing error message explaining why the request failed. If present, MUST be a non-empty string. [JsonProperty(\"description\")] public string Description { get; set; } Property Value string InstanceUsable If an update or deprovisioning operation failed, this flag indicates whether or not the Service Instance is still usable. If true, the Service Instance can still be used, false otherwise. This field MUST NOT be present for errors of other operations. Defaults to true. [JsonProperty(\"instance_usable\", NullValueHandling = NullValueHandling.Ignore)] public bool? InstanceUsable { get; set; } Property Value bool? UpdateRepeatable If an update operation failed, this flag indicates whether this update can be repeated or not. If true, the same update operation MAY be repeated and MAY succeed; if false, repeating the same update operation will fail again. This field MUST NOT be present for errors of other operations. Defaults to true. [JsonProperty(\"update_repeatable\", NullValueHandling = NullValueHandling.Ignore)] public bool? UpdateRepeatable { get; set; } Property Value bool? Methods Equals(StatusBase) protected bool Equals(StatusBase other) Parameters other StatusBase Returns bool Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Errors.html": {
    "href": "api/OpenServiceBroker.Errors.html",
    "title": "Namespace OpenServiceBroker.Errors | OpenServiceBroker for .NET",
    "summary": "Namespace OpenServiceBroker.Errors Classes ApiVersionNotSupportedException The API version request by the client is not supported by server. AsyncRequiredException This request requires client support for deferred (asynchronous) service operations. BadRequestException The The request is malformed or missing mandatory data.. BrokerException The request to the Service Broker failed. ConcurrencyException The Service Broker does not support concurrent requests that mutate the same resource. ConflictException An instance with the same id already exists but with different attributes. Error An error response object. GoneException The specified resource does not exist (anymore). MaintenanceInfoConflictException The Version field provided in the request does not match theVersion field provided in the Service Broker's Catalog. NotFoundException The resource does not exist or a provisioning operation is still in progress. RequiresAppException The request body is missing the AppGuid field. StatusBase"
  },
  "api/OpenServiceBroker.ICompletable.html": {
    "href": "api/OpenServiceBroker.ICompletable.html",
    "title": "Interface ICompletable | OpenServiceBroker for .NET",
    "summary": "Interface ICompletable Namespace OpenServiceBroker Assembly OpenServiceBroker.Model.dll An async/deferred operation that can also be completed synchronously. public interface ICompletable Extension Methods Completable.Complete<TCompletable>(TCompletable) CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Completed Indicates whether this operation has already been completed synchronously and therefore requires no polling. [JsonIgnore] bool Completed { get; set; } Property Value bool Remarks This is not part of the Open Service Broker JSON representation. Instead it is communicated out of band via HTTP status codes."
  },
  "api/OpenServiceBroker.ICompletableWithResult-1.html": {
    "href": "api/OpenServiceBroker.ICompletableWithResult-1.html",
    "title": "Interface ICompletableWithResult<T> | OpenServiceBroker for .NET",
    "summary": "Interface ICompletableWithResult<T> Namespace OpenServiceBroker Assembly OpenServiceBroker.Model.dll An async/deferred operation that can also be completed and provide a result synchronously. public interface ICompletableWithResult<T> : ICompletable where T : class Type Parameters T Inherited Members ICompletable.Completed Extension Methods Completable.Complete<TCompletable>(TCompletable) CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Result If Completed is true this holds the result of the operation. [JsonIgnore] T? Result { get; set; } Property Value T Remarks This is not part of the Open Service Broker JSON representation. Instead it is communicated out of band via HTTP status codes."
  },
  "api/OpenServiceBroker.IOpenServiceBrokerClient.html": {
    "href": "api/OpenServiceBroker.IOpenServiceBrokerClient.html",
    "title": "Interface IOpenServiceBrokerClient | OpenServiceBroker for .NET",
    "summary": "Interface IOpenServiceBrokerClient Namespace OpenServiceBroker Assembly OpenServiceBroker.Client.dll A type-safe client for the Open Service Broker API. public interface IOpenServiceBrokerClient Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Catalog Exposes a list of all services available on the Service Broker. IElementEndpoint<Catalog> Catalog { get; } Property Value IElementEndpoint<Catalog> ServiceInstancesBlocking Exposes Service Instances with blocking operations. If the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. IIndexerEndpoint<IServiceInstanceEndpoint> ServiceInstancesBlocking { get; } Property Value IIndexerEndpoint<IServiceInstanceEndpoint> ServiceInstancesDeferred Exposes Service Instances with potentially deferred (asynchronous) operations. IIndexerEndpoint<IServiceInstanceDeferredEndpoint> ServiceInstancesDeferred { get; } Property Value IIndexerEndpoint<IServiceInstanceDeferredEndpoint> ServiceInstancesPolling Exposes Service Instances. Uses potentially deferred (asynchronous) operations and automatically handles polling to make them appear blocking. IIndexerEndpoint<IServiceInstanceEndpoint> ServiceInstancesPolling { get; } Property Value IIndexerEndpoint<IServiceInstanceEndpoint>"
  },
  "api/OpenServiceBroker.IServicePlanReference.html": {
    "href": "api/OpenServiceBroker.IServicePlanReference.html",
    "title": "Interface IServicePlanReference | OpenServiceBroker for .NET",
    "summary": "Interface IServicePlanReference Namespace OpenServiceBroker Assembly OpenServiceBroker.Model.dll public interface IServicePlanReference Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties PlanId string PlanId { get; set; } Property Value string ServiceId string ServiceId { get; set; } Property Value string"
  },
  "api/OpenServiceBroker.IUnchangedFlag.html": {
    "href": "api/OpenServiceBroker.IUnchangedFlag.html",
    "title": "Interface IUnchangedFlag | OpenServiceBroker for .NET",
    "summary": "Interface IUnchangedFlag Namespace OpenServiceBroker Assembly OpenServiceBroker.Model.dll An operation result that can indicate that nothing was changed. public interface IUnchangedFlag Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Unchanged Indicates whether the request operation resulted in no changes to the existing state. [JsonIgnore] bool Unchanged { get; set; } Property Value bool Remarks This is not part of the Open Service Broker JSON representation. Instead it is communicated out of band via HTTP status codes."
  },
  "api/OpenServiceBroker.Instances.IServiceInstanceBase.html": {
    "href": "api/OpenServiceBroker.Instances.IServiceInstanceBase.html",
    "title": "Interface IServiceInstanceBase | OpenServiceBroker for .NET",
    "summary": "Interface IServiceInstanceBase Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Server.dll Common base for IServiceInstanceBlocking and IServiceInstanceDeferred; do not use directly! public interface IServiceInstanceBase Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Methods FetchAsync(string) Fetches a Service Instance. Task<ServiceInstanceResource> FetchAsync(string instanceId) Parameters instanceId string The id of instance to fetch. Returns Task<ServiceInstanceResource> Exceptions NotFoundException The instance does not exist or a provisioning operation is still in progress. ConcurrencyException The instance is being updated and therefore cannot be fetched at this time."
  },
  "api/OpenServiceBroker.Instances.IServiceInstanceBlocking.html": {
    "href": "api/OpenServiceBroker.Instances.IServiceInstanceBlocking.html",
    "title": "Interface IServiceInstanceBlocking | OpenServiceBroker for .NET",
    "summary": "Interface IServiceInstanceBlocking Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Server.dll Manages Service Instances with blocking operations. public interface IServiceInstanceBlocking : IServiceInstanceBase Inherited Members IServiceInstanceBase.FetchAsync(string) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Methods DeprovisionAsync(ServiceInstanceContext, string, string) Deprovisions/deletes a Service Instance. Task DeprovisionAsync(ServiceInstanceContext context, string serviceId, string planId) Parameters context ServiceInstanceContext The id of instance being deleted. serviceId string The id of the service associated with the instance being deleted. planId string The id of the plan associated with the instance being deleted. Returns Task Exceptions GoneException The instance does not exist (anymore). ProvisionAsync(ServiceInstanceContext, ServiceInstanceProvisionRequest) Provisions a Service Instance. Task<ServiceInstanceProvision> ProvisionAsync(ServiceInstanceContext context, ServiceInstanceProvisionRequest request) Parameters context ServiceInstanceContext The id of instance to provision. request ServiceInstanceProvisionRequest Parameters for the requested Service Instance provision Returns Task<ServiceInstanceProvision> the provisioned instance Exceptions ConflictException An instance with the same id already exists but with different attributes. UpdateAsync(ServiceInstanceContext, ServiceInstanceUpdateRequest) Updates a Service Instance. Task UpdateAsync(ServiceInstanceContext context, ServiceInstanceUpdateRequest request) Parameters context ServiceInstanceContext The id of instance to update. request ServiceInstanceUpdateRequest Parameters for the requested Service Instance update Returns Task Exceptions BrokerException The requested change is not supported."
  },
  "api/OpenServiceBroker.Instances.IServiceInstanceDeferred.html": {
    "href": "api/OpenServiceBroker.Instances.IServiceInstanceDeferred.html",
    "title": "Interface IServiceInstanceDeferred | OpenServiceBroker for .NET",
    "summary": "Interface IServiceInstanceDeferred Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Server.dll Manages Service Instances with potentially deferred (asynchronous) operations. public interface IServiceInstanceDeferred : IServiceInstanceBase Inherited Members IServiceInstanceBase.FetchAsync(string) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Methods DeprovisionAsync(ServiceInstanceContext, string?, string?) Deprovisions/deletes a Service Instance. Task<AsyncOperation> DeprovisionAsync(ServiceInstanceContext context, string? serviceId = null, string? planId = null) Parameters context ServiceInstanceContext The id of instance being deleted. serviceId string The id of the service associated with the instance being deleted. planId string The id of the plan associated with the instance being deleted. Returns Task<AsyncOperation> A potentially deferred (asynchronous) operation. Exceptions GoneException The instance does not exist (anymore). GetLastOperationAsync(ServiceInstanceContext, string?, string?, string?) Gets the state of the last requested deferred (asynchronous) operation for a Service Instance. Task<LastOperationResource> GetLastOperationAsync(ServiceInstanceContext context, string? serviceId = null, string? planId = null, string? operation = null) Parameters context ServiceInstanceContext The id of instance to find last operation applied to it serviceId string The id of the service associated with the instance. planId string The id of the plan associated with the instance. operation string The value provided in Operation. Returns Task<LastOperationResource> Exceptions GoneException The instance requested to be deleted does not exist (anymore). ProvisionAsync(ServiceInstanceContext, ServiceInstanceProvisionRequest) Provisions a Service Instance. Task<ServiceInstanceAsyncOperation> ProvisionAsync(ServiceInstanceContext context, ServiceInstanceProvisionRequest request) Parameters context ServiceInstanceContext The id of instance to provision request ServiceInstanceProvisionRequest Parameters for the requested Service Instance provision Returns Task<ServiceInstanceAsyncOperation> A potentially deferred (asynchronous) operation. Exceptions ConflictException instance with the same id already exists but with different attributes UpdateAsync(ServiceInstanceContext, ServiceInstanceUpdateRequest) Updates a Service Instance. Task<ServiceInstanceAsyncOperation> UpdateAsync(ServiceInstanceContext context, ServiceInstanceUpdateRequest request) Parameters context ServiceInstanceContext The id of instance to update. request ServiceInstanceUpdateRequest Parameters for the requested Service Instance update Returns Task<ServiceInstanceAsyncOperation> A potentially deferred (asynchronous) operation. Exceptions BrokerException The requested change is not supported."
  },
  "api/OpenServiceBroker.Instances.IServiceInstanceDeferredEndpoint.html": {
    "href": "api/OpenServiceBroker.Instances.IServiceInstanceDeferredEndpoint.html",
    "title": "Interface IServiceInstanceDeferredEndpoint | OpenServiceBroker for .NET",
    "summary": "Interface IServiceInstanceDeferredEndpoint Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Client.dll Represents a specific Service Instance with potentially deferred (asynchronous) operations. public interface IServiceInstanceDeferredEndpoint : IServiceInstanceEndpointBase<IServiceBindingDeferredEndpoint>, IEndpoint Inherited Members IServiceInstanceEndpointBase<IServiceBindingDeferredEndpoint>.FetchAsync() IServiceInstanceEndpointBase<IServiceBindingDeferredEndpoint>.ServiceBindings IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Remarks What a Service Instance represents can vary by service. Examples include a single database on a multi-tenant server, a dedicated cluster, or an account on a web application. Methods DeprovisionAsync(string?, string?) Deprovisions/deletes the Service Instance. Task<AsyncOperation> DeprovisionAsync(string? serviceId = null, string? planId = null) Parameters serviceId string The id of the service associated with the instance being deleted. planId string The id of the plan associated with the instance being deleted. Returns Task<AsyncOperation> A potentially deferred (asynchronous) operation. If Completed is false, start polling LastOperation(string?, string?, string?). Exceptions GoneException The instance does not exist (anymore). LastOperation(string?, string?, string?) Provides an endpoint to obtain the state of the last requested deferred (asynchronous) operation. IPollingEndpoint<LastOperationResource> LastOperation(string? serviceId = null, string? planId = null, string? operation = null) Parameters serviceId string If present, it MUST be the ID of the service being used. planId string If present, it MUST be the ID of the plan for the Service Instance. If this endpoint is being polled as a result of changing the plan through a Service Instance Update, the ID of the plan prior to the update MUST be used. operation string A Service Broker-provided identifier for the operation. When a value for operation is included with deferred (asynchronous) responses for Provision, Update, and Deprovision requests, the Platform MUST provide the same value using this query parameter. If present, MUST be a non-empty string. Returns IPollingEndpoint<LastOperationResource> ProvisionAsync(ServiceInstanceProvisionRequest) Provisions the Service Instance. Task<ServiceInstanceAsyncOperation> ProvisionAsync(ServiceInstanceProvisionRequest request) Parameters request ServiceInstanceProvisionRequest Parameters for the requested Service Instance provision. Returns Task<ServiceInstanceAsyncOperation> A potentially deferred (asynchronous) operation. If Completed is false, start polling LastOperation(string?, string?, string?). Exceptions ConflictException An instance with the same id already exists but with different attributes. UpdateAsync(ServiceInstanceUpdateRequest) Updates the Service Instance. Task<ServiceInstanceAsyncOperation> UpdateAsync(ServiceInstanceUpdateRequest request) Parameters request ServiceInstanceUpdateRequest Parameters for the requested Service Instance update. Returns Task<ServiceInstanceAsyncOperation> A potentially deferred (asynchronous) operation. If Completed is false, start polling LastOperation(string?, string?, string?). Exceptions BrokerException The requested change is not supported."
  },
  "api/OpenServiceBroker.Instances.IServiceInstanceEndpoint.html": {
    "href": "api/OpenServiceBroker.Instances.IServiceInstanceEndpoint.html",
    "title": "Interface IServiceInstanceEndpoint | OpenServiceBroker for .NET",
    "summary": "Interface IServiceInstanceEndpoint Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Client.dll Represents a specific Service Instance with blocking operations. public interface IServiceInstanceEndpoint : IServiceInstanceEndpointBase<IServiceBindingEndpoint>, IEndpoint Inherited Members IServiceInstanceEndpointBase<IServiceBindingEndpoint>.FetchAsync() IServiceInstanceEndpointBase<IServiceBindingEndpoint>.ServiceBindings IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Remarks What a Service Instance represents can vary by service. Examples include a single database on a multi-tenant server, a dedicated cluster, or an account on a web application. Methods DeprovisionAsync(string, string) Deprovision the Service Instance. Task DeprovisionAsync(string serviceId, string planId) Parameters serviceId string The id of the service associated with the instance being deleted. planId string The id of the plan associated with the instance being deleted. Returns Task Exceptions GoneException The instance does not exist (anymore). ProvisionAsync(ServiceInstanceProvisionRequest) Provisions the Service Instance. Task<ServiceInstanceProvision> ProvisionAsync(ServiceInstanceProvisionRequest request) Parameters request ServiceInstanceProvisionRequest Parameters for the requested Service Instance provision. Returns Task<ServiceInstanceProvision> The provisioned instance. Exceptions ConflictException An instance with the same id already exists but with different attributes. UpdateAsync(ServiceInstanceUpdateRequest) Updates the Service Instance. Task UpdateAsync(ServiceInstanceUpdateRequest request) Parameters request ServiceInstanceUpdateRequest Parameters for the requested Service Instance update. Returns Task Exceptions BrokerException The requested change is not supported."
  },
  "api/OpenServiceBroker.Instances.IServiceInstanceEndpointBase-1.html": {
    "href": "api/OpenServiceBroker.Instances.IServiceInstanceEndpointBase-1.html",
    "title": "Interface IServiceInstanceEndpointBase<TServiceBindingEndpoint> | OpenServiceBroker for .NET",
    "summary": "Interface IServiceInstanceEndpointBase<TServiceBindingEndpoint> Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Client.dll Common base for IServiceInstanceEndpoint and IServiceInstanceDeferredEndpoint; do not use directly! public interface IServiceInstanceEndpointBase<out TServiceBindingEndpoint> : IEndpoint where TServiceBindingEndpoint : IServiceBindingEndpointBase Type Parameters TServiceBindingEndpoint The endpoint type used to represent Service Bindings for this Service Instance. Inherited Members IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties ServiceBindings Exposes bindings for this Service Instance. IIndexerEndpoint<out TServiceBindingEndpoint> ServiceBindings { get; } Property Value IIndexerEndpoint<TServiceBindingEndpoint> Methods FetchAsync() Fetches a Service Instance. Task<ServiceInstanceResource> FetchAsync() Returns Task<ServiceInstanceResource> Exceptions NotFoundException The instance does not exist or a provisioning operation is still in progress. ConcurrencyException The instance is being updated and therefore cannot be fetched at this time."
  },
  "api/OpenServiceBroker.Instances.ServiceInstanceAsyncOperation.html": {
    "href": "api/OpenServiceBroker.Instances.ServiceInstanceAsyncOperation.html",
    "title": "Class ServiceInstanceAsyncOperation | OpenServiceBroker for .NET",
    "summary": "Class ServiceInstanceAsyncOperation Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Model.dll public class ServiceInstanceAsyncOperation : AsyncOperation, IEquatable<AsyncOperation>, ICompletableWithResult<ServiceInstanceProvision>, ICompletable, IEquatable<ServiceInstanceAsyncOperation> Inheritance object AsyncOperation ServiceInstanceAsyncOperation Implements IEquatable<AsyncOperation> ICompletableWithResult<ServiceInstanceProvision> ICompletable IEquatable<ServiceInstanceAsyncOperation> Inherited Members AsyncOperation.Operation AsyncOperation.Completed AsyncOperation.Equals(AsyncOperation) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Completable.Complete<TCompletable>(TCompletable) CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties DashboardUrl The URL of a web-based management user interface for the Service Instance; we refer to this as a service dashboard. The URL MUST contain enough information for the dashboard to identify the resource being accessed. [JsonProperty(\"dashboard_url\")] public Uri DashboardUrl { get; set; } Property Value Uri Metadata An optional object containing metadata for the Service Instance. [JsonProperty(\"metadata\")] public ServiceInstanceMetadata Metadata { get; set; } Property Value ServiceInstanceMetadata Result If Completed is true this holds the result of the operation. [JsonIgnore] public ServiceInstanceProvision Result { get; set; } Property Value ServiceInstanceProvision Remarks This is not part of the Open Service Broker JSON representation. Instead it is communicated out of band via HTTP status codes. Methods Equals(ServiceInstanceAsyncOperation) Indicates whether the current object is equal to another object of the same type. public bool Equals(ServiceInstanceAsyncOperation other) Parameters other ServiceInstanceAsyncOperation An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Instances.ServiceInstanceBase.html": {
    "href": "api/OpenServiceBroker.Instances.ServiceInstanceBase.html",
    "title": "Class ServiceInstanceBase | OpenServiceBroker for .NET",
    "summary": "Class ServiceInstanceBase Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Model.dll public abstract class ServiceInstanceBase : IServicePlanReference Inheritance object ServiceInstanceBase Implements IServicePlanReference Derived ServiceInstanceProvisionRequest ServiceInstanceResource ServiceInstanceUpdateRequest Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties MaintenanceInfo If a Service Broker provides maintenance information for a Service Plan in its Catalog, a Platform MAY provide the same maintenance information when provisioning a Service Instance. This field can be used to ensure that the end-user of a Platform is provisioning what they are expecting since maintenance information can be used to describe important information (such as the version of the operating system the Service Instance will run on). If a Service Broker's catalog has changed and new maintenance information version is available for the Service Plan being provisioned, then the Service Broker MUST reject the request with MaintenanceInfoConflictException. [JsonProperty(\"maintenance_info\", NullValueHandling = NullValueHandling.Ignore)] public MaintenanceInfo MaintenanceInfo { get; set; } Property Value MaintenanceInfo Parameters Configuration parameters for the Service Instance. Service Brokers SHOULD ensure that the client has provided valid configuration parameters and values for the operation. [JsonProperty(\"parameters\")] public JObject Parameters { get; set; } Property Value JObject PlanId public abstract string PlanId { get; set; } Property Value string ServiceId MUST be the ID of a Service from the Catalog for this Service Broker. [JsonProperty(\"service_id\", Required = Required.Always)] public string ServiceId { get; set; } Property Value string Methods Equals(ServiceInstanceBase) protected bool Equals(ServiceInstanceBase other) Parameters other ServiceInstanceBase Returns bool Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Instances.ServiceInstanceBlockingEndpoint.html": {
    "href": "api/OpenServiceBroker.Instances.ServiceInstanceBlockingEndpoint.html",
    "title": "Class ServiceInstanceBlockingEndpoint | OpenServiceBroker for .NET",
    "summary": "Class ServiceInstanceBlockingEndpoint Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Client.dll Represents a specific Service Instance with blocking operations. If the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. public class ServiceInstanceBlockingEndpoint : ServiceInstanceEndpointBase<IServiceBindingEndpoint, ServiceBindingBlockingEndpoint>, IServiceInstanceEndpoint, IServiceInstanceEndpointBase<IServiceBindingEndpoint>, IEndpoint Inheritance object EndpointBase ServiceBrokerEndpointBase ServiceInstanceEndpointBase<IServiceBindingEndpoint, ServiceBindingBlockingEndpoint> ServiceInstanceBlockingEndpoint Implements IServiceInstanceEndpoint IServiceInstanceEndpointBase<IServiceBindingEndpoint> IEndpoint Inherited Members ServiceInstanceEndpointBase<IServiceBindingEndpoint, ServiceBindingBlockingEndpoint>.FetchAsync() ServiceInstanceEndpointBase<IServiceBindingEndpoint, ServiceBindingBlockingEndpoint>.ServiceBindings ServiceBrokerEndpointBase.GetDeleteUri(string, string) ServiceBrokerEndpointBase.ParseDeferredResponseAsync(HttpResponseMessage) ServiceBrokerEndpointBase.ParseDeferredResponseAsync<TComplete, TDeferred>(HttpResponseMessage) ServiceBrokerEndpointBase.FromContentAsync<T>(HttpResponseMessage) EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ServiceInstanceBlockingEndpoint(IEndpoint, Uri) Represents a specific Service Instance with blocking operations. If the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. public ServiceInstanceBlockingEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Methods DeprovisionAsync(string, string) Deprovision the Service Instance. public Task DeprovisionAsync(string serviceId, string planId) Parameters serviceId string The id of the service associated with the instance being deleted. planId string The id of the plan associated with the instance being deleted. Returns Task Exceptions GoneException The instance does not exist (anymore). ProvisionAsync(ServiceInstanceProvisionRequest) Provisions the Service Instance. public Task<ServiceInstanceProvision> ProvisionAsync(ServiceInstanceProvisionRequest request) Parameters request ServiceInstanceProvisionRequest Parameters for the requested Service Instance provision. Returns Task<ServiceInstanceProvision> The provisioned instance. Exceptions ConflictException An instance with the same id already exists but with different attributes. UpdateAsync(ServiceInstanceUpdateRequest) Updates the Service Instance. public Task UpdateAsync(ServiceInstanceUpdateRequest request) Parameters request ServiceInstanceUpdateRequest Parameters for the requested Service Instance update. Returns Task Exceptions BrokerException The requested change is not supported."
  },
  "api/OpenServiceBroker.Instances.ServiceInstanceContext.html": {
    "href": "api/OpenServiceBroker.Instances.ServiceInstanceContext.html",
    "title": "Class ServiceInstanceContext | OpenServiceBroker for .NET",
    "summary": "Class ServiceInstanceContext Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Server.dll Identifies a specific Service Instance to apply an operation to. public class ServiceInstanceContext : IEquatable<ServiceInstanceContext> Inheritance object ServiceInstanceContext Implements IEquatable<ServiceInstanceContext> Derived ServiceBindingContext Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ServiceInstanceContext(string?) Creates a new Service Instance context. public ServiceInstanceContext(string? instanceId) Parameters instanceId string The ID of the Service Instance. ServiceInstanceContext(string?, OriginatingIdentity?) Creates a new Service Instance context. public ServiceInstanceContext(string? instanceId, OriginatingIdentity? originatingIdentity) Parameters instanceId string The ID of the Service Instance. originatingIdentity OriginatingIdentity Describes the identity of the user that initiated a request from the Platform. Properties InstanceId public string InstanceId { get; } Property Value string OriginatingIdentity Describes the identity of the user that initiated a request from the Platform. Optional. public OriginatingIdentity? OriginatingIdentity { get; } Property Value OriginatingIdentity Methods Equals(ServiceInstanceContext?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ServiceInstanceContext? other) Parameters other ServiceInstanceContext An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ServiceInstanceContext?, ServiceInstanceContext?) public static bool operator ==(ServiceInstanceContext? left, ServiceInstanceContext? right) Parameters left ServiceInstanceContext right ServiceInstanceContext Returns bool operator !=(ServiceInstanceContext?, ServiceInstanceContext?) public static bool operator !=(ServiceInstanceContext? left, ServiceInstanceContext? right) Parameters left ServiceInstanceContext right ServiceInstanceContext Returns bool"
  },
  "api/OpenServiceBroker.Instances.ServiceInstanceDeferredEndpoint.html": {
    "href": "api/OpenServiceBroker.Instances.ServiceInstanceDeferredEndpoint.html",
    "title": "Class ServiceInstanceDeferredEndpoint | OpenServiceBroker for .NET",
    "summary": "Class ServiceInstanceDeferredEndpoint Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Client.dll Represents a specific Service Instance with potentially deferred (asynchronous) operations. public class ServiceInstanceDeferredEndpoint : ServiceInstanceEndpointBase<IServiceBindingDeferredEndpoint, ServiceBindingDeferredEndpoint>, IServiceInstanceDeferredEndpoint, IServiceInstanceEndpointBase<IServiceBindingDeferredEndpoint>, IEndpoint Inheritance object EndpointBase ServiceBrokerEndpointBase ServiceInstanceEndpointBase<IServiceBindingDeferredEndpoint, ServiceBindingDeferredEndpoint> ServiceInstanceDeferredEndpoint Implements IServiceInstanceDeferredEndpoint IServiceInstanceEndpointBase<IServiceBindingDeferredEndpoint> IEndpoint Inherited Members ServiceInstanceEndpointBase<IServiceBindingDeferredEndpoint, ServiceBindingDeferredEndpoint>.FetchAsync() ServiceInstanceEndpointBase<IServiceBindingDeferredEndpoint, ServiceBindingDeferredEndpoint>.ServiceBindings ServiceBrokerEndpointBase.GetDeleteUri(string, string) ServiceBrokerEndpointBase.ParseDeferredResponseAsync(HttpResponseMessage) ServiceBrokerEndpointBase.ParseDeferredResponseAsync<TComplete, TDeferred>(HttpResponseMessage) ServiceBrokerEndpointBase.FromContentAsync<T>(HttpResponseMessage) EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ServiceInstanceDeferredEndpoint(IEndpoint, Uri) Represents a specific Service Instance with potentially deferred (asynchronous) operations. public ServiceInstanceDeferredEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Methods DeprovisionAsync(string?, string?) Deprovisions/deletes the Service Instance. public Task<AsyncOperation> DeprovisionAsync(string? serviceId = null, string? planId = null) Parameters serviceId string The id of the service associated with the instance being deleted. planId string The id of the plan associated with the instance being deleted. Returns Task<AsyncOperation> A potentially deferred (asynchronous) operation. If Completed is false, start polling LastOperation(string?, string?, string?). Exceptions GoneException The instance does not exist (anymore). LastOperation(string?, string?, string?) Provides an endpoint to obtain the state of the last requested deferred (asynchronous) operation. public IPollingEndpoint<LastOperationResource> LastOperation(string? serviceId = null, string? planId = null, string? operation = null) Parameters serviceId string If present, it MUST be the ID of the service being used. planId string If present, it MUST be the ID of the plan for the Service Instance. If this endpoint is being polled as a result of changing the plan through a Service Instance Update, the ID of the plan prior to the update MUST be used. operation string A Service Broker-provided identifier for the operation. When a value for operation is included with deferred (asynchronous) responses for Provision, Update, and Deprovision requests, the Platform MUST provide the same value using this query parameter. If present, MUST be a non-empty string. Returns IPollingEndpoint<LastOperationResource> ProvisionAsync(ServiceInstanceProvisionRequest) Provisions the Service Instance. public Task<ServiceInstanceAsyncOperation> ProvisionAsync(ServiceInstanceProvisionRequest request) Parameters request ServiceInstanceProvisionRequest Parameters for the requested Service Instance provision. Returns Task<ServiceInstanceAsyncOperation> A potentially deferred (asynchronous) operation. If Completed is false, start polling LastOperation(string?, string?, string?). Exceptions ConflictException An instance with the same id already exists but with different attributes. UpdateAsync(ServiceInstanceUpdateRequest) Updates the Service Instance. public Task<ServiceInstanceAsyncOperation> UpdateAsync(ServiceInstanceUpdateRequest request) Parameters request ServiceInstanceUpdateRequest Parameters for the requested Service Instance update. Returns Task<ServiceInstanceAsyncOperation> A potentially deferred (asynchronous) operation. If Completed is false, start polling LastOperation(string?, string?, string?). Exceptions BrokerException The requested change is not supported."
  },
  "api/OpenServiceBroker.Instances.ServiceInstanceEndpointBase-2.html": {
    "href": "api/OpenServiceBroker.Instances.ServiceInstanceEndpointBase-2.html",
    "title": "Class ServiceInstanceEndpointBase<TServiceBindingEndpointInterface, TServiceBindingEndpoint> | OpenServiceBroker for .NET",
    "summary": "Class ServiceInstanceEndpointBase<TServiceBindingEndpointInterface, TServiceBindingEndpoint> Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Client.dll A Service Instance endpoint. public abstract class ServiceInstanceEndpointBase<TServiceBindingEndpointInterface, TServiceBindingEndpoint> : ServiceBrokerEndpointBase, IServiceInstanceEndpointBase<TServiceBindingEndpointInterface>, IEndpoint where TServiceBindingEndpointInterface : IServiceBindingEndpointBase where TServiceBindingEndpoint : class, TServiceBindingEndpointInterface Type Parameters TServiceBindingEndpointInterface TServiceBindingEndpoint Inheritance object EndpointBase ServiceBrokerEndpointBase ServiceInstanceEndpointBase<TServiceBindingEndpointInterface, TServiceBindingEndpoint> Implements IServiceInstanceEndpointBase<TServiceBindingEndpointInterface> IEndpoint Derived ServiceInstanceBlockingEndpoint ServiceInstanceDeferredEndpoint ServiceInstancePollingEndpoint Inherited Members ServiceBrokerEndpointBase.GetDeleteUri(string, string) ServiceBrokerEndpointBase.ParseDeferredResponseAsync(HttpResponseMessage) ServiceBrokerEndpointBase.ParseDeferredResponseAsync<TComplete, TDeferred>(HttpResponseMessage) ServiceBrokerEndpointBase.FromContentAsync<T>(HttpResponseMessage) EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ServiceInstanceEndpointBase(IEndpoint, Uri, bool) A Service Instance endpoint. protected ServiceInstanceEndpointBase(IEndpoint referrer, Uri relativeUri, bool acceptsIncomplete = false) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. acceptsIncomplete bool A value of true indicates that the Platform and its clients support deferred (asynchronous) Service Broker operations. If this parameter is false, and the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. Properties ServiceBindings Exposes bindings for this Service Instance. public IIndexerEndpoint<TServiceBindingEndpointInterface> ServiceBindings { get; } Property Value IIndexerEndpoint<TServiceBindingEndpointInterface> Methods FetchAsync() Fetches a Service Instance. public Task<ServiceInstanceResource> FetchAsync() Returns Task<ServiceInstanceResource> Exceptions NotFoundException The instance does not exist or a provisioning operation is still in progress. ConcurrencyException The instance is being updated and therefore cannot be fetched at this time."
  },
  "api/OpenServiceBroker.Instances.ServiceInstanceMetadata.html": {
    "href": "api/OpenServiceBroker.Instances.ServiceInstanceMetadata.html",
    "title": "Class ServiceInstanceMetadata | OpenServiceBroker for .NET",
    "summary": "Class ServiceInstanceMetadata Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Model.dll Metadata for a Service Instance. public class ServiceInstanceMetadata Inheritance object ServiceInstanceMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Labels Broker specified key-value pairs specifying attributes of Service Instances that are meaningful and relevant to Platform users, but do not directly imply behaviour changes by the Platform. public JObject Labels { get; set; } Property Value JObject"
  },
  "api/OpenServiceBroker.Instances.ServiceInstancePollingEndpoint.html": {
    "href": "api/OpenServiceBroker.Instances.ServiceInstancePollingEndpoint.html",
    "title": "Class ServiceInstancePollingEndpoint | OpenServiceBroker for .NET",
    "summary": "Class ServiceInstancePollingEndpoint Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Client.dll Represents a specific Service Instance. Uses potentially deferred (asynchronous) operations and automatically handles polling to make them appear blocking. public class ServiceInstancePollingEndpoint : ServiceInstanceEndpointBase<IServiceBindingEndpoint, ServiceBindingPollingEndpoint>, IServiceInstanceEndpoint, IServiceInstanceEndpointBase<IServiceBindingEndpoint>, IEndpoint Inheritance object EndpointBase ServiceBrokerEndpointBase ServiceInstanceEndpointBase<IServiceBindingEndpoint, ServiceBindingPollingEndpoint> ServiceInstancePollingEndpoint Implements IServiceInstanceEndpoint IServiceInstanceEndpointBase<IServiceBindingEndpoint> IEndpoint Inherited Members ServiceInstanceEndpointBase<IServiceBindingEndpoint, ServiceBindingPollingEndpoint>.FetchAsync() ServiceInstanceEndpointBase<IServiceBindingEndpoint, ServiceBindingPollingEndpoint>.ServiceBindings ServiceBrokerEndpointBase.GetDeleteUri(string, string) ServiceBrokerEndpointBase.ParseDeferredResponseAsync(HttpResponseMessage) ServiceBrokerEndpointBase.ParseDeferredResponseAsync<TComplete, TDeferred>(HttpResponseMessage) ServiceBrokerEndpointBase.FromContentAsync<T>(HttpResponseMessage) EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ServiceInstancePollingEndpoint(IEndpoint, Uri) Represents a specific Service Instance. Uses potentially deferred (asynchronous) operations and automatically handles polling to make them appear blocking. public ServiceInstancePollingEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Methods DeprovisionAsync(string, string) Deprovision the Service Instance. public Task DeprovisionAsync(string serviceId, string planId) Parameters serviceId string The id of the service associated with the instance being deleted. planId string The id of the plan associated with the instance being deleted. Returns Task Exceptions GoneException The instance does not exist (anymore). ProvisionAsync(ServiceInstanceProvisionRequest) Provisions the Service Instance. public Task<ServiceInstanceProvision> ProvisionAsync(ServiceInstanceProvisionRequest request) Parameters request ServiceInstanceProvisionRequest Parameters for the requested Service Instance provision. Returns Task<ServiceInstanceProvision> The provisioned instance. Exceptions ConflictException An instance with the same id already exists but with different attributes. UpdateAsync(ServiceInstanceUpdateRequest) Updates the Service Instance. public Task UpdateAsync(ServiceInstanceUpdateRequest request) Parameters request ServiceInstanceUpdateRequest Parameters for the requested Service Instance update. Returns Task Exceptions BrokerException The requested change is not supported."
  },
  "api/OpenServiceBroker.Instances.ServiceInstancePreviousValues.html": {
    "href": "api/OpenServiceBroker.Instances.ServiceInstancePreviousValues.html",
    "title": "Class ServiceInstancePreviousValues | OpenServiceBroker for .NET",
    "summary": "Class ServiceInstancePreviousValues Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Model.dll Information about a Service Instance prior to the update. public class ServiceInstancePreviousValues : IEquatable<ServiceInstancePreviousValues> Inheritance object ServiceInstancePreviousValues Implements IEquatable<ServiceInstancePreviousValues> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties OrganizationId [JsonProperty(\"organization_id\")] [Obsolete(\"Deprecated as it was redundant information\")] public string OrganizationId { get; set; } Property Value string PlanId If present, it MUST be the ID of the plan prior to the update. [JsonProperty(\"plan_id\")] public string PlanId { get; set; } Property Value string ServiceId [JsonProperty(\"service_id\")] [Obsolete(\"Deprecated; determined to be unnecessary as the value is immutable\")] public string ServiceId { get; set; } Property Value string SpaceId [JsonProperty(\"space_id\")] [Obsolete(\"Deprecated as it was redundant information\")] public string SpaceId { get; set; } Property Value string Methods Equals(ServiceInstancePreviousValues) Indicates whether the current object is equal to another object of the same type. public bool Equals(ServiceInstancePreviousValues other) Parameters other ServiceInstancePreviousValues An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Instances.ServiceInstanceProvision.html": {
    "href": "api/OpenServiceBroker.Instances.ServiceInstanceProvision.html",
    "title": "Class ServiceInstanceProvision | OpenServiceBroker for .NET",
    "summary": "Class ServiceInstanceProvision Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Model.dll public class ServiceInstanceProvision : IUnchangedFlag, IEquatable<ServiceInstanceProvision> Inheritance object ServiceInstanceProvision Implements IUnchangedFlag IEquatable<ServiceInstanceProvision> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties DashboardUrl The URL of a web-based management user interface for the Service Instance; we refer to this as a service dashboard. The URL MUST contain enough information for the dashboard to identify the resource being accessed. [JsonProperty(\"dashboard_url\")] public Uri DashboardUrl { get; set; } Property Value Uri Unchanged Indicates whether the request operation resulted in no changes to the existing state. [JsonIgnore] public bool Unchanged { get; set; } Property Value bool Remarks This is not part of the Open Service Broker JSON representation. Instead it is communicated out of band via HTTP status codes. Methods Equals(ServiceInstanceProvision) Indicates whether the current object is equal to another object of the same type. public bool Equals(ServiceInstanceProvision other) Parameters other ServiceInstanceProvision An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Instances.ServiceInstanceProvisionRequest.html": {
    "href": "api/OpenServiceBroker.Instances.ServiceInstanceProvisionRequest.html",
    "title": "Class ServiceInstanceProvisionRequest | OpenServiceBroker for .NET",
    "summary": "Class ServiceInstanceProvisionRequest Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Model.dll public class ServiceInstanceProvisionRequest : ServiceInstanceBase, IServicePlanReference, IEquatable<ServiceInstanceProvisionRequest> Inheritance object ServiceInstanceBase ServiceInstanceProvisionRequest Implements IServicePlanReference IEquatable<ServiceInstanceProvisionRequest> Inherited Members ServiceInstanceBase.ServiceId ServiceInstanceBase.Parameters ServiceInstanceBase.MaintenanceInfo ServiceInstanceBase.Equals(ServiceInstanceBase) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Context Platform specific contextual information under which the Service Instance is to be provisioned. Although most Service Brokers will not use this field, it could be helpful in determining data placement or applying custom business rules. [JsonProperty(\"context\")] public JObject Context { get; set; } Property Value JObject Remarks This will replace OrganizationGuid and SpaceGuid in future versions of the specification - in the interim both SHOULD be used to ensure interoperability with old and new implementations. OrganizationGuid Deprecated in favor of Context. The Platform GUID for the organization under which the Service Instance is to be provisioned. Although most Service Brokers will not use this field, it might be helpful for executing operations on a user's behalf. MUST be a non-empty string. [JsonProperty(\"organization_guid\", Required = Required.Always)] public string OrganizationGuid { get; set; } Property Value string PlanId MUST be the ID of a Plan from the service that has been requested. [JsonProperty(\"plan_id\", Required = Required.Always)] public override string PlanId { get; set; } Property Value string SpaceGuid Deprecated in favor of Context. The identifier for the project space within the Platform organization. Although most Service Brokers will not use this field, it might be helpful for executing operations on a user's behalf. MUST be a non-empty string. [JsonProperty(\"space_guid\", Required = Required.Always)] public string SpaceGuid { get; set; } Property Value string Methods Equals(ServiceInstanceProvisionRequest) Indicates whether the current object is equal to another object of the same type. public bool Equals(ServiceInstanceProvisionRequest other) Parameters other ServiceInstanceProvisionRequest An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Instances.ServiceInstanceResource.html": {
    "href": "api/OpenServiceBroker.Instances.ServiceInstanceResource.html",
    "title": "Class ServiceInstanceResource | OpenServiceBroker for .NET",
    "summary": "Class ServiceInstanceResource Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Model.dll public class ServiceInstanceResource : ServiceInstanceBase, IServicePlanReference, IEquatable<ServiceInstanceResource> Inheritance object ServiceInstanceBase ServiceInstanceResource Implements IServicePlanReference IEquatable<ServiceInstanceResource> Inherited Members ServiceInstanceBase.ServiceId ServiceInstanceBase.Parameters ServiceInstanceBase.MaintenanceInfo ServiceInstanceBase.Equals(ServiceInstanceBase) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties DashboardUrl The URL of a web-based management user interface for the Service Instance; we refer to this as a service dashboard. The URL MUST contain enough information for the dashboard to identify the resource being accessed. [JsonProperty(\"dashboard_url\")] public Uri DashboardUrl { get; set; } Property Value Uri PlanId The ID of the Plan from the catalog that is associated with the Service Instance. [JsonProperty(\"plan_id\")] public override string PlanId { get; set; } Property Value string Methods Equals(ServiceInstanceResource) Indicates whether the current object is equal to another object of the same type. public bool Equals(ServiceInstanceResource other) Parameters other ServiceInstanceResource An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Instances.ServiceInstanceUpdateRequest.html": {
    "href": "api/OpenServiceBroker.Instances.ServiceInstanceUpdateRequest.html",
    "title": "Class ServiceInstanceUpdateRequest | OpenServiceBroker for .NET",
    "summary": "Class ServiceInstanceUpdateRequest Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Model.dll public class ServiceInstanceUpdateRequest : ServiceInstanceBase, IServicePlanReference, IEquatable<ServiceInstanceUpdateRequest> Inheritance object ServiceInstanceBase ServiceInstanceUpdateRequest Implements IServicePlanReference IEquatable<ServiceInstanceUpdateRequest> Inherited Members ServiceInstanceBase.ServiceId ServiceInstanceBase.Parameters ServiceInstanceBase.MaintenanceInfo ServiceInstanceBase.Equals(ServiceInstanceBase) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Context Contextual data under which the Service Instance is created. [JsonProperty(\"context\")] public JObject Context { get; set; } Property Value JObject PlanId If present, MUST be the ID of a Plan from the service that has been requested. If this field is not present in the request message, then the Service Broker MUST NOT change the plan of the instance as a result of this request. [JsonProperty(\"plan_id\")] public override string PlanId { get; set; } Property Value string PreviousValues Information about the Service Instance prior to the update. [JsonProperty(\"previous_values\")] public ServiceInstancePreviousValues PreviousValues { get; set; } Property Value ServiceInstancePreviousValues Methods Equals(ServiceInstanceUpdateRequest) Indicates whether the current object is equal to another object of the same type. public bool Equals(ServiceInstanceUpdateRequest other) Parameters other ServiceInstanceUpdateRequest An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.Instances.ServiceInstancesController.html": {
    "href": "api/OpenServiceBroker.Instances.ServiceInstancesController.html",
    "title": "Class ServiceInstancesController | OpenServiceBroker for .NET",
    "summary": "Class ServiceInstancesController Namespace OpenServiceBroker.Instances Assembly OpenServiceBroker.Server.dll Exposes Service Instances. [Route(\"v2/service_instances/{instance_id}\")] public class ServiceInstancesController : BrokerControllerBase<IServiceInstanceBlocking, IServiceInstanceDeferred>, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller BrokerControllerBase<IServiceInstanceBlocking, IServiceInstanceDeferred> ServiceInstancesController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members BrokerControllerBase<IServiceInstanceBlocking, IServiceInstanceDeferred>.Do(bool, Func<IServiceInstanceBlocking, Task<IActionResult>>, Func<IServiceInstanceDeferred, Task<IActionResult>>) BrokerControllerBase<IServiceInstanceBlocking, IServiceInstanceDeferred>.SupportedApiVersion BrokerControllerBase<IServiceInstanceBlocking, IServiceInstanceDeferred>.Ok() BrokerControllerBase<IServiceInstanceBlocking, IServiceInstanceDeferred>.OriginatingIdentity BrokerControllerBase<IServiceInstanceBlocking, IServiceInstanceDeferred>.SetRetryAfter(TimeSpan) Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ServiceInstancesController(IServiceProvider) Exposes Service Instances. public ServiceInstancesController(IServiceProvider provider) Parameters provider IServiceProvider Methods Deprovision(string, string, string, bool) Deprovisions/deletes a Service Instance. [HttpDelete(\"\")] [ProducesResponseType(200)] [ProducesResponseType(typeof(ServiceInstanceAsyncOperation), 202)] [ProducesResponseType(typeof(Error), 400)] [ProducesResponseType(typeof(Error), 410)] [ProducesResponseType(typeof(Error), 422)] public Task<IActionResult> Deprovision(string instanceId, string serviceId, string planId, bool acceptsIncomplete = false) Parameters instanceId string The id of instance being deleted. serviceId string The id of the service associated with the instance being deleted. planId string The id of the plan associated with the instance being deleted. acceptsIncomplete bool A value of true indicates that the Platform and its clients support deferred (asynchronous) Service Broker operations. If this parameter is false, and the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. Returns Task<IActionResult> Fetch(string) Fetches a Service Instance. [HttpGet(\"\")] [ProducesResponseType(typeof(ServiceInstanceResource), 200)] [ProducesResponseType(typeof(Error), 404)] [ProducesResponseType(typeof(Error), 422)] public Task<IActionResult> Fetch(string instanceId) Parameters instanceId string The id of instance to fetch. Returns Task<IActionResult> GetLastOperation(string, string?, string?, string?) Gets the state of the last requested deferred (asynchronous) operation for a Service Instance. [HttpGet(\"last_operation\")] [ProducesResponseType(typeof(LastOperationResource), 200)] [ProducesResponseType(typeof(Error), 400)] [ProducesResponseType(typeof(Error), 410)] public Task<IActionResult> GetLastOperation(string instanceId, string? serviceId = null, string? planId = null, string? operation = null) Parameters instanceId string The instance id of instance to find last operation applied to it serviceId string The id of the service associated with the instance. planId string The id of the plan associated with the instance. operation string The value provided in Operation. Returns Task<IActionResult> Provision(string, ServiceInstanceProvisionRequest, bool) Provisions a Service Instance. [HttpPut(\"\")] [ProducesResponseType(typeof(ServiceInstanceProvision), 200)] [ProducesResponseType(typeof(ServiceInstanceProvision), 201)] [ProducesResponseType(typeof(ServiceInstanceAsyncOperation), 202)] [ProducesResponseType(typeof(Error), 400)] [ProducesResponseType(typeof(Error), 409)] [ProducesResponseType(typeof(Error), 422)] public Task<IActionResult> Provision(string instanceId, ServiceInstanceProvisionRequest request, bool acceptsIncomplete = false) Parameters instanceId string The id of instance to provision. request ServiceInstanceProvisionRequest Parameters for the requested Service Instance provision acceptsIncomplete bool A value of true indicates that the Platform and its clients support deferred (asynchronous) Service Broker operations. If this parameter is false, and the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. Returns Task<IActionResult> Update(string, ServiceInstanceUpdateRequest, bool) Updates a Service Instance. [HttpPatch(\"\")] [ProducesResponseType(200)] [ProducesResponseType(typeof(ServiceInstanceAsyncOperation), 202)] [ProducesResponseType(typeof(Error), 400)] [ProducesResponseType(typeof(Error), 422)] public Task<IActionResult> Update(string instanceId, ServiceInstanceUpdateRequest request, bool acceptsIncomplete = false) Parameters instanceId string The instance id of instance to update request ServiceInstanceUpdateRequest Parameters for the requested Service Instance update acceptsIncomplete bool A value of true indicates that the Platform and its clients support deferred (asynchronous) Service Broker operations. If this parameter is false, and the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. Returns Task<IActionResult>"
  },
  "api/OpenServiceBroker.Instances.html": {
    "href": "api/OpenServiceBroker.Instances.html",
    "title": "Namespace OpenServiceBroker.Instances | OpenServiceBroker for .NET",
    "summary": "Namespace OpenServiceBroker.Instances Classes ServiceInstanceAsyncOperation ServiceInstanceBase ServiceInstanceBlockingEndpoint Represents a specific Service Instance with blocking operations. If the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. ServiceInstanceContext Identifies a specific Service Instance to apply an operation to. ServiceInstanceDeferredEndpoint Represents a specific Service Instance with potentially deferred (asynchronous) operations. ServiceInstanceEndpointBase<TServiceBindingEndpointInterface, TServiceBindingEndpoint> A Service Instance endpoint. ServiceInstanceMetadata Metadata for a Service Instance. ServiceInstancePollingEndpoint Represents a specific Service Instance. Uses potentially deferred (asynchronous) operations and automatically handles polling to make them appear blocking. ServiceInstancePreviousValues Information about a Service Instance prior to the update. ServiceInstanceProvision ServiceInstanceProvisionRequest ServiceInstanceResource ServiceInstanceUpdateRequest ServiceInstancesController Exposes Service Instances. Interfaces IServiceInstanceBase Common base for IServiceInstanceBlocking and IServiceInstanceDeferred; do not use directly! IServiceInstanceBlocking Manages Service Instances with blocking operations. IServiceInstanceDeferred Manages Service Instances with potentially deferred (asynchronous) operations. IServiceInstanceDeferredEndpoint Represents a specific Service Instance with potentially deferred (asynchronous) operations. IServiceInstanceEndpoint Represents a specific Service Instance with blocking operations. IServiceInstanceEndpointBase<TServiceBindingEndpoint> Common base for IServiceInstanceEndpoint and IServiceInstanceDeferredEndpoint; do not use directly!"
  },
  "api/OpenServiceBroker.LastOperationEndpoint.html": {
    "href": "api/OpenServiceBroker.LastOperationEndpoint.html",
    "title": "Class LastOperationEndpoint | OpenServiceBroker for .NET",
    "summary": "Class LastOperationEndpoint Namespace OpenServiceBroker Assembly OpenServiceBroker.Client.dll An endpoint to obtain the state of a deferred (asynchronous) operation. public class LastOperationEndpoint : PollingEndpoint<LastOperationResource>, ICachingEndpoint, IPollingEndpoint<LastOperationResource>, IElementEndpoint<LastOperationResource>, IElementEndpoint, IEndpoint Inheritance object EndpointBase CachingEndpointBase ElementEndpoint<LastOperationResource> PollingEndpoint<LastOperationResource> LastOperationEndpoint Implements ICachingEndpoint IPollingEndpoint<LastOperationResource> IElementEndpoint<LastOperationResource> IElementEndpoint IEndpoint Inherited Members PollingEndpoint<LastOperationResource>.HandleAsync(Func<Task<HttpResponseMessage>>, string) PollingEndpoint<LastOperationResource>.GetObservable() PollingEndpoint<LastOperationResource>.PollingInterval ElementEndpoint<LastOperationResource>.ReadAsync(CancellationToken) ElementEndpoint<LastOperationResource>.ExistsAsync(CancellationToken) ElementEndpoint<LastOperationResource>.SetAsync(LastOperationResource, CancellationToken) ElementEndpoint<LastOperationResource>.MergeAsync(LastOperationResource, CancellationToken) ElementEndpoint<LastOperationResource>.DeleteAsync(CancellationToken) ElementEndpoint<LastOperationResource>.UpdateAsync(Func<LastOperationResource, LastOperationResource>, int, CancellationToken) ElementEndpoint<LastOperationResource>.UpdateAsync(Action<LastOperationResource>, int, CancellationToken) ElementEndpoint<LastOperationResource>.UpdateAsync(Action<JsonPatchDocument<LastOperationResource>>, int, CancellationToken) ElementEndpoint<LastOperationResource>.Response ElementEndpoint<LastOperationResource>.SetAllowed ElementEndpoint<LastOperationResource>.MergeAllowed ElementEndpoint<LastOperationResource>.DeleteAllowed CachingEndpointBase.GetContentAsync(CancellationToken, string) CachingEndpointBase.PutContentAsync(HttpContent, CancellationToken, string) CachingEndpointBase.DeleteContentAsync(CancellationToken, string) CachingEndpointBase.ResponseCache EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors LastOperationEndpoint(IEndpoint, string?, string?, string?) Creates a new last operation endpoint. public LastOperationEndpoint(IEndpoint referrer, string? serviceId = null, string? planId = null, string? operation = null) Parameters referrer IEndpoint The endpoint used to navigate to this one. serviceId string If present, it MUST be the ID of the service being used. planId string If present, it MUST be the ID of the plan for the Service Instance. If this endpoint is being polled as a result of changing the plan through a Service Instance Update, the ID of the plan prior to the update MUST be used. operation string A Service Broker-provided identifier for the operation. When a value for operation is included with asynchronous responses for Provision, Update, and Deprovision requests, the Platform MUST provide the same value using this query parameter. If present, MUST be a non-empty string."
  },
  "api/OpenServiceBroker.LastOperationResource.html": {
    "href": "api/OpenServiceBroker.LastOperationResource.html",
    "title": "Class LastOperationResource | OpenServiceBroker for .NET",
    "summary": "Class LastOperationResource Namespace OpenServiceBroker Assembly OpenServiceBroker.Model.dll Represents the state of the last requested deferred operation. public class LastOperationResource : StatusBase, IEquatable<LastOperationResource> Inheritance object StatusBase LastOperationResource Implements IEquatable<LastOperationResource> Inherited Members StatusBase.Description StatusBase.InstanceUsable StatusBase.UpdateRepeatable StatusBase.Equals(StatusBase) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties RetryAfter Indicates how long the platform should wait before polling again. [JsonIgnore] public TimeSpan? RetryAfter { get; set; } Property Value TimeSpan? Remarks This is only used on the server-side. See LastOperationEndpoint.PollingInterval instead on client-side. State The current state. [JsonProperty(\"state\", Required = Required.Always)] [JsonConverter(typeof(StringEnumConverter))] public LastOperationResourceState State { get; set; } Property Value LastOperationResourceState Methods Equals(LastOperationResource) Indicates whether the current object is equal to another object of the same type. public bool Equals(LastOperationResource other) Parameters other LastOperationResource An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.LastOperationResourceState.html": {
    "href": "api/OpenServiceBroker.LastOperationResourceState.html",
    "title": "Enum LastOperationResourceState | OpenServiceBroker for .NET",
    "summary": "Enum LastOperationResourceState Namespace OpenServiceBroker Assembly OpenServiceBroker.Model.dll public enum LastOperationResourceState Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Fields [EnumMember(Value = \"failed\")] Failed = 2 The operation failed. The Platform MUST cease polling. [EnumMember(Value = \"in progress\")] InProgress = 0 The operation is still in progress. The Platform SHOULD continue polling. [EnumMember(Value = \"succeeded\")] Succeeded = 1 The operation succeeded. The Platform MUST cease polling."
  },
  "api/OpenServiceBroker.MaintenanceInfo.html": {
    "href": "api/OpenServiceBroker.MaintenanceInfo.html",
    "title": "Class MaintenanceInfo | OpenServiceBroker for .NET",
    "summary": "Class MaintenanceInfo Namespace OpenServiceBroker Assembly OpenServiceBroker.Model.dll This field can be used to ensure that the end-user of a Platform is provisioning what they are expecting since maintenance information can be used to describe important information (such as the version of the operating system the Service Instance will run on). public class MaintenanceInfo : IEquatable<MaintenanceInfo> Inheritance object MaintenanceInfo Implements IEquatable<MaintenanceInfo> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Properties Description This SHOULD be a string describing the impact of the maintenance update, for example, important version changes, configuration changes, default value changes, etc. The Platform MAY present this information to the user before they trigger the maintenance update. [JsonProperty(\"description\", NullValueHandling = NullValueHandling.Ignore)] public string Description { get; set; } Property Value string Version This MUST be a string conforming to a semantic version 2.0. The Platform MAY use this field to determine whether a maintenance update is available for a Service Instance. [JsonProperty(\"version\", Required = Required.Always)] public string Version { get; set; } Property Value string Methods Equals(MaintenanceInfo) Indicates whether the current object is equal to another object of the same type. public bool Equals(MaintenanceInfo other) Parameters other MaintenanceInfo An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/OpenServiceBroker.MvcBuilderExtensions.html": {
    "href": "api/OpenServiceBroker.MvcBuilderExtensions.html",
    "title": "Class MvcBuilderExtensions | OpenServiceBroker for .NET",
    "summary": "Class MvcBuilderExtensions Namespace OpenServiceBroker Assembly OpenServiceBroker.Server.dll public static class MvcBuilderExtensions Inheritance object MvcBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddOpenServiceBroker(IMvcBuilder) Registers API Controllers implementing the Open Service Broker API. public static IMvcBuilder AddOpenServiceBroker(this IMvcBuilder builder) Parameters builder IMvcBuilder Returns IMvcBuilder Remarks Make sure to also register your implementations of: ICatalogService, IServiceInstanceBlocking or IServiceInstanceDeferred, optionally IServiceBindingBlocking or IServiceBindingDeferred."
  },
  "api/OpenServiceBroker.OpenServiceBrokerClient.html": {
    "href": "api/OpenServiceBroker.OpenServiceBrokerClient.html",
    "title": "Class OpenServiceBrokerClient | OpenServiceBroker for .NET",
    "summary": "Class OpenServiceBrokerClient Namespace OpenServiceBroker Assembly OpenServiceBroker.Client.dll A type-safe client for the Open Service Broker API. public class OpenServiceBrokerClient : EntryEndpoint, IEndpoint, IOpenServiceBrokerClient Inheritance object EndpointBase EntryEndpoint OpenServiceBrokerClient Implements IEndpoint IOpenServiceBrokerClient Inherited Members EntryEndpoint.ReadMetaAsync(CancellationToken) EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors OpenServiceBrokerClient(HttpClient, Uri) Creates a new Open Service Broker Client using a custom HttpClient. This is usually used for custom authentication schemes, e.g. client certificates. public OpenServiceBrokerClient(HttpClient httpClient, Uri uri) Parameters httpClient HttpClient The HttpClient to use for communication with My Service. uri Uri The base URI of the Open Service Broker API instance (without the version number). OpenServiceBrokerClient(Uri, NetworkCredential?) Creates a new Open Service Broker Client. public OpenServiceBrokerClient(Uri uri, NetworkCredential? credentials = null) Parameters uri Uri The base URI of the Open Service Broker API instance (without the version number). credentials NetworkCredential Optional HTTP Basic Auth credentials used to authenticate against the REST interface. OpenServiceBrokerClient(Uri, string) Creates a new Open Service Broker Client. public OpenServiceBrokerClient(Uri uri, string token) Parameters uri Uri The base URI of the Open Service Broker API instance (without the version number). token string The OAuth token to present as a \"Bearer\" to the REST interface. Properties Catalog Exposes a list of all services available on the Service Broker. public IElementEndpoint<Catalog> Catalog { get; } Property Value IElementEndpoint<Catalog> DefaultApiVersion The default Open Service Broker API version to set for requests. public static ApiVersion DefaultApiVersion { get; } Property Value ApiVersion ServiceInstancesBlocking Exposes Service Instances with blocking operations. If the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. public IIndexerEndpoint<IServiceInstanceEndpoint> ServiceInstancesBlocking { get; } Property Value IIndexerEndpoint<IServiceInstanceEndpoint> ServiceInstancesDeferred Exposes Service Instances with potentially deferred (asynchronous) operations. public IIndexerEndpoint<IServiceInstanceDeferredEndpoint> ServiceInstancesDeferred { get; } Property Value IIndexerEndpoint<IServiceInstanceDeferredEndpoint> ServiceInstancesPolling Exposes Service Instances. Uses potentially deferred (asynchronous) operations and automatically handles polling to make them appear blocking. public IIndexerEndpoint<IServiceInstanceEndpoint> ServiceInstancesPolling { get; } Property Value IIndexerEndpoint<IServiceInstanceEndpoint> Methods SetApiVersion(ApiVersion) Sets the Open Service Broker API version to a custom value. Only use this if you know what you are doing! public void SetApiVersion(ApiVersion version) Parameters version ApiVersion SetOriginatingIdentity(OriginatingIdentity) Sets the identity of the user that initiated the request from the Platform. public void SetOriginatingIdentity(OriginatingIdentity identity) Parameters identity OriginatingIdentity"
  },
  "api/OpenServiceBroker.OpenServiceBrokerErrorHandler.html": {
    "href": "api/OpenServiceBroker.OpenServiceBrokerErrorHandler.html",
    "title": "Class OpenServiceBrokerErrorHandler | OpenServiceBroker for .NET",
    "summary": "Class OpenServiceBrokerErrorHandler Namespace OpenServiceBroker Assembly OpenServiceBroker.Client.dll Handles Open Service Broker error responses. public class OpenServiceBrokerErrorHandler : IErrorHandler Inheritance object OpenServiceBrokerErrorHandler Implements IErrorHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Methods HandleAsync(HttpResponseMessage) Throws appropriate Exceptions based on HTTP status codes and response bodies. public Task HandleAsync(HttpResponseMessage response) Parameters response HttpResponseMessage Returns Task Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone InvalidOperationException Conflict, PreconditionFailed or RequestedRangeNotSatisfiable HttpRequestException Other non-success status code."
  },
  "api/OpenServiceBroker.OriginatingIdentity.html": {
    "href": "api/OpenServiceBroker.OriginatingIdentity.html",
    "title": "Class OriginatingIdentity | OpenServiceBroker for .NET",
    "summary": "Class OriginatingIdentity Namespace OpenServiceBroker Assembly OpenServiceBroker.Model.dll Describes the identity of the user that initiated a request from the Platform. public class OriginatingIdentity : IEquatable<OriginatingIdentity> Inheritance object OriginatingIdentity Implements IEquatable<OriginatingIdentity> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors OriginatingIdentity(string, JObject) Describes the identity of the user that initiated a request from the Platform. public OriginatingIdentity(string platform, JObject value) Parameters platform string The Platform from which the request is being sent. value JObject A JSON object describing the user. Fields HttpHeaderName The name of the HTTP header used to transmit this information. public const string HttpHeaderName = \"X-Broker-API-Originating-Identity\" Field Value string Properties Platform The Platform from which the request is being sent. public string Platform { get; } Property Value string Value A JSON object describing the user. public JObject Value { get; } Property Value JObject Methods Equals(OriginatingIdentity) Indicates whether the current object is equal to another object of the same type. public bool Equals(OriginatingIdentity other) Parameters other OriginatingIdentity An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Parse(string) Parses the originating identity object from its header string representation. public static OriginatingIdentity Parse(string value) Parameters value string Returns OriginatingIdentity ToString() Serialized the originating identity object to its header string representation. public override string ToString() Returns string Operators operator ==(OriginatingIdentity, OriginatingIdentity) public static bool operator ==(OriginatingIdentity left, OriginatingIdentity right) Parameters left OriginatingIdentity right OriginatingIdentity Returns bool operator !=(OriginatingIdentity, OriginatingIdentity) public static bool operator !=(OriginatingIdentity left, OriginatingIdentity right) Parameters left OriginatingIdentity right OriginatingIdentity Returns bool"
  },
  "api/OpenServiceBroker.ServiceBrokerEndpointBase.html": {
    "href": "api/OpenServiceBroker.ServiceBrokerEndpointBase.html",
    "title": "Class ServiceBrokerEndpointBase | OpenServiceBroker for .NET",
    "summary": "Class ServiceBrokerEndpointBase Namespace OpenServiceBroker Assembly OpenServiceBroker.Client.dll Common base class for Open Service Broker endpoints. public abstract class ServiceBrokerEndpointBase : EndpointBase, IEndpoint Inheritance object EndpointBase ServiceBrokerEndpointBase Implements IEndpoint Derived ServiceBindingEndpointBase ServiceInstanceEndpointBase<TServiceBindingEndpointInterface, TServiceBindingEndpoint> Inherited Members EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CompletableWithResult.Complete<TCompletable, TResult>(TCompletable, TResult?) Constructors ServiceBrokerEndpointBase(IEndpoint, Uri, bool) Creates a new service endpoint. protected ServiceBrokerEndpointBase(IEndpoint referrer, Uri relativeUri, bool acceptsIncomplete = false) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Prefix ./ to append a trailing slash to the referrer URI if missing. acceptsIncomplete bool A value of true indicates that the Platform and its clients support deferred (asynchronous) Service Broker operations. If this parameter is false, and the Service Broker can only handle a request deferred (asynchronously) AsyncRequiredException is thrown. Methods FromContentAsync<T>(HttpResponseMessage) protected Task<T> FromContentAsync<T>(HttpResponseMessage message) Parameters message HttpResponseMessage Returns Task<T> Type Parameters T GetDeleteUri(string?, string?) protected Uri GetDeleteUri(string? serviceId, string? planId) Parameters serviceId string planId string Returns Uri ParseDeferredResponseAsync(HttpResponseMessage) protected Task<AsyncOperation> ParseDeferredResponseAsync(HttpResponseMessage response) Parameters response HttpResponseMessage Returns Task<AsyncOperation> ParseDeferredResponseAsync<TComplete, TDeferred>(HttpResponseMessage) protected Task<TDeferred> ParseDeferredResponseAsync<TComplete, TDeferred>(HttpResponseMessage response) where TComplete : class, IUnchangedFlag where TDeferred : AsyncOperation, ICompletableWithResult<TComplete>, new() Parameters response HttpResponseMessage Returns Task<TDeferred> Type Parameters TComplete TDeferred"
  },
  "api/OpenServiceBroker.html": {
    "href": "api/OpenServiceBroker.html",
    "title": "Namespace OpenServiceBroker | OpenServiceBroker for .NET",
    "summary": "Namespace OpenServiceBroker Classes AsyncOperation BrokerControllerBase<TBlocking, TDeferred> Common base class for Open Service Broker API controllers. Completable CompletableWithResult LastOperationEndpoint An endpoint to obtain the state of a deferred (asynchronous) operation. LastOperationResource Represents the state of the last requested deferred operation. MaintenanceInfo This field can be used to ensure that the end-user of a Platform is provisioning what they are expecting since maintenance information can be used to describe important information (such as the version of the operating system the Service Instance will run on). MvcBuilderExtensions OpenServiceBrokerClient A type-safe client for the Open Service Broker API. OpenServiceBrokerErrorHandler Handles Open Service Broker error responses. OriginatingIdentity Describes the identity of the user that initiated a request from the Platform. ServiceBrokerEndpointBase Common base class for Open Service Broker endpoints. Structs ApiVersion Interfaces ICompletable An async/deferred operation that can also be completed synchronously. ICompletableWithResult<T> An async/deferred operation that can also be completed and provide a result synchronously. IOpenServiceBrokerClient A type-safe client for the Open Service Broker API. IServicePlanReference IUnchangedFlag An operation result that can indicate that nothing was changed. Enums LastOperationResourceState"
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | OpenServiceBroker for .NET",
    "summary": "Open Service Broker API for .NET This project provides both a server and a client .NET library for the Open Service Broker API specification. This specification allows developers, ISVs, and SaaS vendors a single, simple, and elegant way to deliver services to applications running within cloud native platforms such as Cloud Foundry, OpenShift, and Kubernetes. The Server Library implements the API for you using ASP.NET Core. You simply need to provide implementations for a few interfaces, shielded from the HTTP-related details. The Client Library allows you to call Service Brokers that implement the API using idiomatic C# interfaces and type-safe DTOs. Server Library Set up a regular ASP.NET Core 8.0+ project and add the NuGet package OpenServiceBroker.Server. Then implement the following interfaces: ICatalogService (optionally also IETagProvider and/or ILastModifiedProvider on the same class) either IServiceInstanceBlocking or IServiceInstanceDeferred or both either IServiceBindingBlocking or IServiceBindingDeferred or both Register your implementations in the IServiceCollection for dependency injection. For example: services.AddTransient<ICatalogService, MyCatalogService>() .AddTransient<IServiceInstanceBlocking, MyServiceInstanceBlocking>() .AddTransient<IServiceBindingBlocking, MyServiceBindingBlocking>(); Then enable MVC Controllers using .AddMvc() or .AddControllers() followed by calling the .AddOpenServiceBroker() extension method: services.AddControllers() .AddOpenServiceBroker(); You can use the project template to quickly set up a pre-configured ASP.NET Core 8.0 project with OpenServiceBroker.Server. Versioning The Server Library inspects the X-Broker-API-Version header for all requests (as defined in the specification). Currently it accepts all versions from 2.0 to 2.16. Client Library Add the NuGet package OpenServiceBroker.Client to your project. You can then create an instance of the client like this: var client = new OpenServiceBrokerClient(new Uri(\"http://example.com/\")); Asynchronous Operations All operations that result in HTTP request are async. Non-successful HTTP status codes are mapped to domain-specific exception types (BrokerException and derived). Refer to the libraries XML documentation for details on which exceptions to expect on which invocations. The Open Service Broker API specification allows for both synchronous/blocking and asynchronous/incomplete/deferred operations. To avoid confusion with the C# language concept of async this library uses the terms \"blocking\" and \"deferred\" to describe these API features. Instances of OpenServiceBrokerClient have three properties that expose the same functionality in different ways: ServiceInstancesBlocking allows you to request blocking responses from the server. However, you may encounter AsyncRequiredException if the server does not support blocking operations. ServiceInstancesDeferred allows you to request deferred responses from the server. However, you have to manually handle waiting/polling for the completion of operations. ServiceInstancesPolling combines the advantages of both. It requests deferred responses from the server and transparently handles the waiting/polling for you. It is the recommended option for most use-cases. Samples Read the catalog: var result = await client.Catalog.ReadAsync(); Provision a service instance: var result = await client.ServiceInstancesPolling[\"123\"].ProvisionAsync(new ServiceInstanceProvisionRequest { ServiceId = \"abc\", PlanId = \"xyz\", Context = new JObject { {\"platform\", \"myplatform\"} }, Parameters = new JObject { {\"some_option\", \"some value\"} } }); Fetch a service instance: var result = await client.ServiceInstancesPolling[\"123\"].FetchAsync(); Update a service instance: var result = await client.ServiceInstancesPolling[\"123\"].UpdateAsync(new ServiceInstanceUpdateRequest { ServiceId = \"abc\", PlanId = \"xyz\", Context = new JObject { {\"platform\", \"myplatform\"} }, Parameters = new JObject { {\"some_option\", \"some value\"} } }); Deprovision a service instance: await client.ServiceInstancesPolling[\"123\"].DeprovisionAsync(serviceId: \"abc\", planId: \"xyz\"); Create a service binding: var result = await client.ServiceInstancesPolling[\"123\"].ServiceBindings[\"456\"].ProvisionAsync(new ServiceBindingRequest { ServiceId = \"abc\", PlanId = \"xyz\", BindResource = new ServiceBindingResourceObject { AppGuid = \"e490c9df-6627-4699-8db8-55edc2a88e58\" }, Context = new JObject { {\"platform\", \"myplatform\"} }, Parameters = new JObject { {\"some_option\", \"some value\"} } }); Fetch a service binding: var result = await client.ServiceInstancesPolling[\"123\"].ServiceBindings[\"456\"].FetchAsync(); Delete a service binding: await client.ServiceInstancesPolling[\"123\"].ServiceBindings[\"456\"].UnbindAsync(serviceId: \"abc\", planId: \"xyz\"); Versioning The Client Library specifies the API version it expects by setting the X-Broker-API-Version header for all requests (as defined in the specification). Currently the Client Library supports the 2.16 feature set but defaults to setting the version header to 2.13 for greater compatibility with older brokers. If the broker you are calling expects a different version and you are sure your request is compliant with that version of the specification you can override this: client.SetApiVersion(new ApiVersion(2, 16));"
  }
}